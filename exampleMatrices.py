# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"])

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")#There is a %0.001 error due to rounding
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange():\n",g.inRange())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg():",h.avg())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [-5, -5]}
Averages: {'Col 1': -5.0}

-5 


Dimension: 2x4
Numbers' range: {'Col 1': [15, 34], 'Col 2': [-23, 36], 'Col 3': [-24, -15], 'Col 4': [-44, 38]}
Averages: {'Col 1': 24.5, 'Col 2': 6.5, 'Col 3': -19.5, 'Col 4': -3.0}

 34 -23 -24  38 
 15  36 -15 -44 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [1.3625, 4.8593], 'Col 2': [-3.739, 4.8942], 'Col 3': [-3.0511, 0.5669]}
Averages: {'Col 1': 2.7536, 'Col 2': -0.1468, 'Col 3': -0.8338}

 1.3625 -3.7390 -0.4301 
 1.8377 -0.2946  0.5669 
 2.9551 -1.4478 -0.4211 
 4.8593  4.8942 -3.0511 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1084.5272, 611.6432], 'Col 2': [-619.6362, 1053.9107], 'Col 3': [-1205.5116, 1242.3683], 'Col 4': [-1238.2333, 60.1062], 'Col 5': [-394.6836, 535.1744], 'Col 6': [-579.077, 1230.0347]}
Averages: {'Col 1': -306.2657, 'Col 2': 292.5164, 'Col 3': 235.3176, 'Col 4': -429.8925, 'Col 5': 102.1057, 'Col 6': 184.601}

 -301.0187   294.7630  1242.3683  -149.7513    69.4379  -504.9861 
 -787.8608  1053.9107  1029.1531 -1238.2333   360.3070  1230.0347 
  611.6432   701.8101   501.1394  -329.4231  -394.6836  -443.1069 
  174.5012   578.1676  -483.0522  -143.4994   535.1744  1211.4604 
 -450.3319  -253.9169   327.8084    60.1062  -311.1942  -579.0770 
-1084.5272  -619.6362 -1205.5116  -778.5540   353.5930   193.2807 


Dimension: 3x6
Numbers' range: {'Col 1': [3, 7], 'Col 2': [6, 9], 'Col 3': [8, 10], 'Col 4': [3, 8], 'Col 5': [4, 10], 'Col 6': [6, 9]}
Averages: {'Col 1': 5.0, 'Col 2': 7.3333, 'Col 3': 9.0, 'Col 4': 6.0, 'Col 5': 6.3333, 'Col 6': 7.0}

 3  7  9  8  5  9 
 7  9  8  3  4  6 
 5  6 10  7 10  6 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [14, 69], 'Col 2': [9, 37], 'Col 3': [37, 86], 'Col 4': [4, 95], 'Col 5': [34, 99]}
Averages: {'Col 1': 42.4, 'Col 2': 23.2, 'Col 3': 58.0, 'Col 4': 57.6, 'Col 5': 70.8}

69 28 39 58 87 
60 37 44  4 99 
14 17 37 70 90 
25  9 86 61 34 
44 25 84 95 44 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [-4.8299, 2.241], 'Col 2': [-4.1023, 4.2203], 'Col 3': [-4.6716, 3.8924], 'Col 4': [-3.5054, 3.6059]}
Averages: {'Col 1': -1.7812, 'Col 2': -0.09, 'Col 3': -0.8459, 'Col 4': -0.7762}

-4.8299  1.1987 -4.6716  3.6059 
 2.2410 -1.6769 -0.9186 -2.1543 
-1.6024  4.2203  3.8924 -3.5054 
-2.9334 -4.1023 -1.6857 -1.0512 


Square matrix
Dimension: 3x3
Numbers' range: {'Col 1': [3, 8], 'Col 2': [2, 5], 'Col 3': [4, 7]}
Averages: {'Col 1': 5.3333, 'Col 2': 3.3333, 'Col 3': 5.3333}

3 5 7 
8 3 4 
5 2 5 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [-3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 15.0}

 34 -52  33 
  9  88  -3 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Numbers' range: {'Col 1': [312, 312], 'Col 2': [45, 45], 'Col 3': [12, 12], 'Col 4': [44, 44], 'Col 5': [352, 352], 'Col 6': [45, 45], 'Col 7': [12, 12], 'Col 8': [44, 44], 'Col 9': [3, 3], 'Col 10': [-5, -5]}
Averages: {'Col 1': 312.0, 'Col 2': 45.0, 'Col 3': 12.0, 'Col 4': 44.0, 'Col 5': 352.0, 'Col 6': 45.0, 'Col 7': 12.0, 'Col 8': 44.0, 'Col 9': 3.0, 'Col 10': -5.0}

312  45  12  44 352  45  12  44   3  -5 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}
Averages: {'Height': 163.3636, 'Weight': 62.1364, 'Age': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [1.3625, 4.8593], 'Col 2': [-3.739, 4.8942], 'Col 3': [-3.0511, 0.5669]}
Averages: {'Col 1': 2.7536, 'Col 2': -0.1468, 'Col 3': -0.8338}

 1.3625 -3.7390 -0.4301 
 1.8377 -0.2946  0.5669 
 2.9551 -1.4478 -0.4211 
 4.8593  4.8942 -3.0511 

d.matrix:

[[1.3625, -3.739, -0.4301], [1.8377, -0.2946, 0.5669], [2.9551, -1.4478, -0.4211], [4.8593, 4.8942, -3.0511]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [294.763, 1053.9107], 'Col 2': [-483.0522, 1242.3683]}
Averages: {'Col 1': 657.1628, 'Col 2': 572.4022}

 294.7630 1242.3683 
1053.9107 1029.1531 
 701.8101  501.1394 
 578.1676 -483.0522 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1084.5272, 611.6432], 'Col 2': [-619.6362, 1053.9107], 'Col 3': [-1205.5116, 1242.3683], 'Col 4': [-1238.2333, 60.1062], 'Col 5': [-394.6836, 535.1744], 'Col 6': [-579.077, 1230.0347]}
Averages: {'Col 1': -306.2657, 'Col 2': 292.5164, 'Col 3': 235.3176, 'Col 4': -429.8925, 'Col 5': 102.1057, 'Col 6': 184.601}

 -301.0187   294.7630  1242.3683  -149.7513    69.4379  -504.9861 
 -787.8608  1053.9107  1029.1531 -1238.2333   360.3070  1230.0347 
  611.6432   701.8101   501.1394  -329.4231  -394.6836  -443.1069 
  174.5012   578.1676  -483.0522  -143.4994   535.1744  1211.4604 
 -450.3319  -253.9169   327.8084    60.1062  -311.1942  -579.0770 
-1084.5272  -619.6362 -1205.5116  -778.5540   353.5930   193.2807 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1084.5272, 611.6432], 'Col 2': [-619.6362, 1053.9107], 'Col 3': [-1205.5116, 1242.3683], 'Col 4': [-1238.2333, 60.1062], 'Col 5': [-394.6836, 535.1744], 'Col 6': [-579.077, 1230.0347]}
Averages: {'Col 1': -306.2657, 'Col 2': 292.5164, 'Col 3': 235.3176, 'Col 4': -429.8925, 'Col 5': 102.1057, 'Col 6': 184.601}

 -301.0187   294.7630  1242.3683  -149.7513    69.4379  -504.9861 
 -787.8608  1053.9107  1029.1531 -1238.2333   360.3070  1230.0347 
  611.6432   701.8101   501.1394  -329.4231  -394.6836  -443.1069 
  174.5012   578.1676  -483.0522  -143.4994   535.1744  1211.4604 
 -450.3319  -253.9169   327.8084    60.1062  -311.1942  -579.0770 
-1084.5272  -619.6362 -1205.5116  -778.5540   353.5930   193.2807 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-301.0187, 0], 'Col 2': [0, 294.763], 'Col 3': [-2222.5163, 13261.658], 'Col 4': [-846.287, 3263.9989], 'Col 5': [-1076.0055, 599.3405], 'Col 6': [-13221.6319, 2551.7425]}
Averages: {'Col 1': -50.1698, 'Col 2': 96.1977, 'Col 3': 2046.9183, 'Col 4': 462.1696, 'Col 5': -113.7903, 'Col 6': -2185.8891}

  -301.0187    294.7630   1242.3683   -149.7513     69.4379   -504.9861 
     0.0000    282.4230  -2222.5163   -846.2870    178.5661   2551.7425 
     0.0000      0.0000  13261.6580   3263.9989  -1076.0055 -13221.6319 
     0.0000      0.0000      0.0000    505.0571    599.3405    264.1899 
     0.0000      0.0000      0.0000      0.0000   -454.0808   -483.7736 
     0.0000      0.0000      0.0000      0.0000      0.0000  -1720.8752 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-2.0319, 3.6029], 'Col 2': [-5.9543, 4.6057], 'Col 3': [-1.4263, 1], 'Col 4': [-1.2328, 1], 'Col 5': [-0.8166, 1], 'Col 6': [0, 1]}
Averages: {'Col 1': 1.0174, 'Col 2': -0.0261, 'Col 3': -0.082, 'Col 4': -0.0637, 'Col 5': 0.0306, 'Col 6': 0.1667}

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 2.6173  1.0000  0.0000  0.0000  0.0000  0.0000 
-2.0319  4.6057  1.0000  0.0000  0.0000  0.0000 
-0.5797  2.6522  0.4624  1.0000  0.0000  0.0000 
 1.4960 -2.4605 -0.5278 -0.1494  1.0000  0.0000 
 3.6029 -5.9543 -1.4263 -1.2328 -0.8166  1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.0, 0.0], 'Col 2': [0.0, 0.0], 'Col 3': [0.0, 0.0], 'Col 4': [0.0, 0.0], 'Col 5': [0.0, 0.0], 'Col 6': [0.0, 0.0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0}

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 

################
g.dim:
 [3, 6]
g.inRange():
 {'Col 1': [3, 7], 'Col 2': [6, 9], 'Col 3': [8, 10], 'Col 4': [3, 8], 'Col 5': [4, 10], 'Col 6': [6, 9]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [3, 7], 'Col 2': [6, 9], 'Col 3': [8, 10], 'Col 4': [3, 8], 'Col 5': [4, 10], 'Col 6': [6, 9]}
Averages: {'Col 1': 5.0, 'Col 2': 7.3333, 'Col 3': 9.0, 'Col 4': 6.0, 'Col 5': 6.3333, 'Col 6': 7.0}

 3  7  9  8  5  9 
 7  9  8  3  4  6 
 5  6 10  7 10  6 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [3, 7], 'Col 2': [7, 9], 'Col 3': [8, 9], 'Col 4': [3, 8], 'Col 5': [4, 5], 'Col 6': [6, 9]}
Averages: {'Col 1': 5.0, 'Col 2': 8.0, 'Col 3': 8.5, 'Col 4': 5.5, 'Col 5': 4.5, 'Col 6': 7.5}

3 7 9 8 5 9 
7 9 8 3 4 6 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg(): {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [0, 1.0], 'Col 2': [0, 1.0], 'Col 3': [0, 1.0], 'Col 4': [0, 1.0], 'Col 5': [0, 1.0], 'Col 6': [0, 1.0], 'Col 7': [0, 1.0]}
Averages: {'Col 1': 0.1429, 'Col 2': 0.1429, 'Col 3': 0.1429, 'Col 4': 0.1429, 'Col 5': 0.1429, 'Col 6': 0.1429, 'Col 7': 0.1429}

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [35, 97], 'Col 2': [25, 71], 'Col 3': [20, 99], 'Col 4': [3, 55], 'Col 5': [44, 97], 'Col 6': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [3, 7], 'Col 2': [7, 9], 'Col 3': [8, 9], 'Col 4': [3, 8]}
Averages: {'Col 1': 5.0, 'Col 2': 8.0, 'Col 3': 8.5, 'Col 4': 5.5}

3 7 9 8 
7 9 8 3 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[3, 7, 9, 8], [7, 9, 8, 3]],ranged=[-5, 5],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [14, 69], 'Col 2': [9, 37], 'Col 3': [37, 86], 'Col 4': [4, 95], 'Col 5': [34, 99]}
Averages: {'Col 1': 42.4, 'Col 2': 23.2, 'Col 3': 58.0, 'Col 4': 57.6, 'Col 5': 70.8}

69 28 39 58 87 
60 37 44  4 99 
14 17 37 70 90 
25  9 86 61 34 
44 25 84 95 44 

p.det:
 345023524.0000002

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-17499809.0, 10363722.0], 'Col 2': [-3650927.0, 11704841.0], 'Col 3': [-5768146.0, 3683113.0], 'Col 4': [-20991377.0, 5932569.0], 'Col 5': [-5712741.0, 23210083.0]}
Averages: {'Col 1': -1370616.0, 'Col 2': 1455376.8, 'Col 3': -157557.6, 'Col 4': -2234914.4, 'Col 5': 3053028.8}

 10363722.0000  -3205970.0000  -5768146.0000   3537934.0000  -4213850.0000 
-17499809.0000  11704841.0000    624081.0000 -20991377.0000  23210083.0000 
 -3076415.0000   2210159.0000  -1108077.0000   5932569.0000  -1207683.0000 
  1805799.0000  -3650927.0000   1781241.0000  -2832505.0000   3189335.0000 
  1553623.0000    218781.0000   3683113.0000   3178807.0000  -5712741.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.0507, 0.03], 'Col 2': [-0.0106, 0.0339], 'Col 3': [-0.0167, 0.0107], 'Col 4': [-0.0608, 0.0172], 'Col 5': [-0.0166, 0.0673]}
Averages: {'Col 1': -0.004, 'Col 2': 0.0042, 'Col 3': -0.0005, 'Col 4': -0.0065, 'Col 5': 0.0088}

 0.0300 -0.0093 -0.0167  0.0103 -0.0122 
-0.0507  0.0339  0.0018 -0.0608  0.0673 
-0.0089  0.0064 -0.0032  0.0172 -0.0035 
 0.0052 -0.0106  0.0052 -0.0082  0.0092 
 0.0045  0.0006  0.0107  0.0092 -0.0166 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [14, 69], 'Col 2': [9, 37], 'Col 3': [37, 86], 'Col 4': [4, 95], 'Col 5': [34, 99]}
Averages: {'Col 1': 42.4, 'Col 2': 23.2, 'Col 3': 58.0, 'Col 4': 57.6, 'Col 5': 70.8}

69 28 39 58 87 
60 37 44  4 99 
14 17 37 70 90 
25  9 86 61 34 
44 25 84 95 44 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [9, 28], 'Col 2': [37, 86], 'Col 3': [58, 95], 'Col 4': [34, 90]}
Averages: {'Col 1': 19.75, 'Col 2': 61.5, 'Col 3': 71.0, 'Col 4': 63.75}

28 39 58 87 
17 37 70 90 
 9 86 61 34 
25 84 95 44 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [9, 28], 'Col 2': [55, 55], 'Col 3': [37, 86], 'Col 4': [58, 95], 'Col 5': [34, 90]}
Averages: {'Col 1': 19.75, 'Col 2': 55.0, 'Col 3': 61.5, 'Col 4': 71.0, 'Col 5': 63.75}

28 55 39 58 87 
17 55 37 70 90 
 9 55 86 61 34 
25 55 84 95 44 

p.sdev()
{'Col 1': 8.539125638299666, 'Col 2': 0.0, 'Col 3': 27.160019636713567, 'Col 4': 16.792855623746664, 'Col 5': 28.894924583162812}
################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [28, 87], 'Col 2': [17, 90], 'Col 3': [9, 86], 'Col 4': [25, 95]}
Averages: {'Col 1': 53.4, 'Col 2': 53.8, 'Col 3': 49.0, 'Col 4': 60.6}

28 17  9 25 
55 55 55 55 
39 37 86 84 
58 70 61 95 
87 90 34 44 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################
id4: 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.addDim(10)):
 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-171.541, 117.7889], 'Col 2': [-260.3184, 100.3766], 'Col 3': [-133.4975, 154.5218]}
Averages: {'Col 1': -26.876, 'Col 2': -79.9709, 'Col 3': 10.5122}

 117.7889  100.3766 -133.4975 
-171.5410 -260.3184  154.5218 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [1.1837, 1.7455], 'Col 2': [0.912, 1.3894], 'Col 3': [0.4167, 1.3378]}
Averages: {'Col 1': 1.4646, 'Col 2': 1.1507, 'Col 3': 0.8773}

1.7455 0.9120 0.4167 
1.1837 1.3894 1.3378 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1084.5272, 611.6432], 'Col 2': [-619.6362, 1053.9107], 'Col 3': [-1205.5116, 1242.3683], 'Col 4': [-1238.2333, 60.1062], 'Col 5': [-394.6836, 535.1744], 'Col 6': [-579.077, 1230.0347]}
Averages: {'Col 1': -306.2657, 'Col 2': 292.5164, 'Col 3': 235.3176, 'Col 4': -429.8925, 'Col 5': 102.1057, 'Col 6': 184.601}

 -301.0187   294.7630  1242.3683  -149.7513    69.4379  -504.9861 
 -787.8608  1053.9107  1029.1531 -1238.2333   360.3070  1230.0347 
  611.6432   701.8101   501.1394  -329.4231  -394.6836  -443.1069 
  174.5012   578.1676  -483.0522  -143.4994   535.1744  1211.4604 
 -450.3319  -253.9169   327.8084    60.1062  -311.1942  -579.0770 
-1084.5272  -619.6362 -1205.5116  -778.5540   353.5930   193.2807 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1084, 611], 'Col 2': [-619, 1053], 'Col 3': [-1205, 1242], 'Col 4': [-1238, 60], 'Col 5': [-394, 535], 'Col 6': [-579, 1230]}
Averages: {'Col 1': -306.1667, 'Col 2': 292.3333, 'Col 3': 235.1667, 'Col 4': -429.5, 'Col 5': 102.0, 'Col 6': 184.6667}

 -301   294  1242  -149    69  -504 
 -787  1053  1029 -1238   360  1230 
  611   701   501  -329  -394  -443 
  174   578  -483  -143   535  1211 
 -450  -253   327    60  -311  -579 
-1084  -619 -1205  -778   353   193 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1084.53, 611.64], 'Col 2': [-619.64, 1053.91], 'Col 3': [-1205.51, 1242.37], 'Col 4': [-1238.23, 60.11], 'Col 5': [-394.68, 535.17], 'Col 6': [-579.08, 1230.03]}
Averages: {'Col 1': -306.2667, 'Col 2': 292.515, 'Col 3': 235.3183, 'Col 4': -429.89, 'Col 5': 102.1067, 'Col 6': 184.5983}

 -301.0200   294.7600  1242.3700  -149.7500    69.4400  -504.9900 
 -787.8600  1053.9100  1029.1500 -1238.2300   360.3100  1230.0300 
  611.6400   701.8100   501.1400  -329.4200  -394.6800  -443.1100 
  174.5000   578.1700  -483.0500  -143.5000   535.1700  1211.4600 
 -450.3300  -253.9200   327.8100    60.1100  -311.1900  -579.0800 
-1084.5300  -619.6400 -1205.5100  -778.5500   353.5900   193.2800 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.86, 0.64], 'Col 2': [-0.92, 0.91], 'Col 3': [-0.51, 0.81], 'Col 4': [-0.75, 0.11], 'Col 5': [-0.68, 0.59], 'Col 6': [-0.99, 0.46]}
Averages: {'Col 1': -0.1, 'Col 2': 0.1817, 'Col 3': 0.1517, 'Col 4': -0.39, 'Col 5': 0.1067, 'Col 6': -0.0683}

-0.0200  0.7600  0.3700 -0.7500  0.4400 -0.9900 
-0.8600  0.9100  0.1500 -0.2300  0.3100  0.0300 
 0.6400  0.8100  0.1400 -0.4200 -0.6800 -0.1100 
 0.5000  0.1700 -0.0500 -0.5000  0.1700  0.4600 
-0.3300 -0.9200  0.8100  0.1100 -0.1900 -0.0800 
-0.5300 -0.6400 -0.5100 -0.5500  0.5900  0.2800 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [28, 87], 'Col 2': [17, 90], 'Col 3': [9, 86], 'Col 4': [25, 95]}
Averages: {'Col 1': 53.0, 'Col 2': 53.5, 'Col 3': 47.5, 'Col 4': 62.0}

28 17  9 25 
39 37 86 84 
58 70 61 95 
87 90 34 44 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [39, 87], 'Col 2': [37, 90], 'Col 3': [34, 86], 'Col 4': [44, 95]}
Averages: {'Col 1': 55.75, 'Col 2': 58.5, 'Col 3': 66.75, 'Col 4': 76.75}

39 37 86 84 
39 37 86 84 
58 70 61 95 
87 90 34 44 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 99], 'Col 2': [0, 99], 'Col 3': [0, 99], 'Col 4': [0, 99], 'Col 5': [0, 99], 'Col 6': [0, 99], 'Col 7': [0, 99], 'Col 8': [0, 99]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: {'Col 1': [1, 1], 'Col 2': [0, 5], 'Col 3': [1, 3], 'Col 4': [1, 6]}
Averages: {'Col 1': 1.0, 'Col 2': 2.5, 'Col 3': 2.0, 'Col 4': 3.5}

1 5 3 6 
1 0 1 1 

################

f.roundForm(3)>f.roundForm(1)
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [-3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 15.0}

 34 -52  33 
  9  88  -3 

################
validStr2:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Numbers' range: {'Col 1': [312, 312], 'Col 2': [45, 45], 'Col 3': [12, 12], 'Col 4': [44, 44], 'Col 5': [352, 352], 'Col 6': [45, 45], 'Col 7': [12, 12], 'Col 8': [44, 44], 'Col 9': [3, 3], 'Col 10': [-5, -5]}
Averages: {'Col 1': 312.0, 'Col 2': 45.0, 'Col 3': 12.0, 'Col 4': 44.0, 'Col 5': 352.0, 'Col 6': 45.0, 'Col 7': 12.0, 'Col 8': 44.0, 'Col 9': 3.0, 'Col 10': -5.0}

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}
Averages: {'Height': 163.3636, 'Weight': 62.1364, 'Age': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

