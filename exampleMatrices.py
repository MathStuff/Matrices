# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix
a=Matrix(0)
v=Matrix()
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q,v,a,k,l,m]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.echelon.p")
f.echelon.p
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange:\n",g.inRange)
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\na<b")
print(a<b)

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: [8, 8]
Average: {'Col 1': 8.0}

8 


Dimension: 2x4
Numbers' range: [-7, 8]
Average: {'Col 1': 1.5, 'Col 2': 3.0, 'Col 3': 1.5, 'Col 4': -0.5}

-3 -2  1 -7 
 6  8  2  6 


Float Matrix
Dimension: 4x3
Numbers' range: [-5.0355, 8.9461]
Average: {'Col 1': 1.3062, 'Col 2': -2.0581, 'Col 3': 0.7766}

 2.3831 -0.5574 -0.4570 
-0.6166 -1.8164 -1.1116 
 1.4689 -5.0355 -4.2711 
 1.9892 -0.8232  8.9461 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-947.4419, 915.8514]
Average: {'Col 1': 24.7382, 'Col 2': -18.8233, 'Col 3': 13.6691, 'Col 4': -83.482, 'Col 5': 6.1073, 'Col 6': -105.6175}

  -9.1936  -38.0673 -231.9723 -383.2050  915.8514 -947.4419 
 865.1464 -330.1715 -204.6124  -87.4533   85.9112  102.7404 
-208.9383 -260.5091 -177.8435 -101.0692 -242.2826  320.7241 
 245.5404  -11.0560 -333.8380 -301.3895  329.6746   -1.0766 
-791.0453  354.6908  685.0494  191.0314 -419.7879 -470.0097 
  46.9197  172.1731  345.2315  181.1938 -632.7229  361.3587 


Dimension: 3x6
Numbers' range: [-10, 7]
Average: {'Col 1': -0.6667, 'Col 2': -1.3333, 'Col 3': 0.0, 'Col 4': 1.6667, 'Col 5': 0.3333, 'Col 6': -1.6667}

 -1  -6   4   7   3   0 
  1  -1  -9   7   2 -10 
 -2   3   5  -9  -4   5 


Square matrix
Dimension: 5x5
Numbers' range: [0, 98]
Average: {'Col 1': 72.8, 'Col 2': 52.8, 'Col 3': 43.4, 'Col 4': 50.6, 'Col 5': 45.8}

83  3 88 98 82 
73 51 71 25 45 
83 34 39 26 15 
61 82 19 90 18 
64 94  0 14 69 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-9.2161, 5.0577]
Average: {'Col 1': -0.3246, 'Col 2': -1.9502, 'Col 3': -3.5064, 'Col 4': -0.6164}

 0.0000 -0.6625 -1.5456  1.6667 
-3.0177  2.1483 -4.7057  1.4642 
 5.0577 -0.0705  0.0574  0.0000 
-3.3384 -9.2161 -7.8315 -5.5963 

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: [-52, 88]
Average: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: [-5, 352]
Average: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: [5, 659]
Average: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: [9, 193]
Average: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-5.0355, 8.9461]
Average: {'Col 1': 1.3062, 'Col 2': -2.0581, 'Col 3': 0.7766}

 2.3831 -0.5574 -0.4570 
-0.6166 -1.8164 -1.1116 
 1.4689 -5.0355 -4.2711 
 1.9892 -0.8232  8.9461 

d.matrix:

[[2.3831, -0.5574, -0.457], [-0.6166, -1.8164, -1.1116], [1.4689, -5.0355, -4.2711], [1.9892, -0.8232, 8.9461]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-333.838, -11.056]
Average: {'Col 1': -159.951, 'Col 2': -237.0666}

 -38.0673 -231.9723 
-330.1715 -204.6124 
-260.5091 -177.8435 
 -11.0560 -333.8380 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-947.4419, 915.8514]
Average: {'Col 1': 24.7382, 'Col 2': -18.8233, 'Col 3': 13.6691, 'Col 4': -83.482, 'Col 5': 6.1073, 'Col 6': -105.6175}

  -9.1936  -38.0673 -231.9723 -383.2050  915.8514 -947.4419 
 865.1464 -330.1715 -204.6124  -87.4533   85.9112  102.7404 
-208.9383 -260.5091 -177.8435 -101.0692 -242.2826  320.7241 
 245.5404  -11.0560 -333.8380 -301.3895  329.6746   -1.0766 
-791.0453  354.6908  685.0494  191.0314 -419.7879 -470.0097 
  46.9197  172.1731  345.2315  181.1938 -632.7229  361.3587 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-947.4419, 915.8514]
Average: {'Col 1': 24.7382, 'Col 2': -18.8233, 'Col 3': 13.6691, 'Col 4': -83.482, 'Col 5': 6.1073, 'Col 6': -105.6175}

  -9.1936  -38.0673 -231.9723 -383.2050  915.8514 -947.4419 
 865.1464 -330.1715 -204.6124  -87.4533   85.9112  102.7404 
-208.9383 -260.5091 -177.8435 -101.0692 -242.2826  320.7241 
 245.5404  -11.0560 -333.8380 -301.3895  329.6746   -1.0766 
-791.0453  354.6908  685.0494  191.0314 -419.7879 -470.0097 
  46.9197  172.1731  345.2315  181.1938 -632.7229  361.3587 

f.echelon.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-89054.4858832272, 86270.3668083768]
Average: {'Col 1': -1.5323, 'Col 2': -658.415, 'Col 3': -3429.4958, 'Col 4': -5537.3536, 'Col 5': 12782.0333, 'Col 6': -13097.2793}

    -9.1936    -38.0673   -231.9723   -383.2050    915.8514   -947.4419 
     0.0000  -3912.4226 -22033.9427 -36148.2421  86270.3668 -89054.4859 
     0.0000      0.0000   1688.9403   3021.4803  -7724.1149   8090.2434 
     0.0000      0.0000      0.0000    285.8453  -1262.1444   1639.0715 
     0.0000      0.0000      0.0000      0.0000  -1507.7591   1679.4175 
     0.0000      0.0000      0.0000      0.0000      0.0000      9.5195 

################
g.dim:
 [3, 6]
g.inRange:
 [-10, 7]
g: 
Dimension: 3x6
Numbers' range: [-10, 7]
Average: {'Col 1': -0.6667, 'Col 2': -1.3333, 'Col 3': 0.0, 'Col 4': 1.6667, 'Col 5': 0.3333, 'Col 6': -1.6667}

 -1  -6   4   7   3   0 
  1  -1  -9   7   2 -10 
 -2   3   5  -9  -4   5 

g.remove(3):

Dimension: 2x6
Numbers' range: [-10, 7]
Average: {'Col 1': 0.0, 'Col 2': -3.5, 'Col 3': -2.5, 'Col 4': 7.0, 'Col 5': 2.5, 'Col 6': -5.0}

 -1  -6   4   7   3   0 
  1  -1  -9   7   2 -10 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: <bound method Matrix.avg of [[96, 35, 31, 47, 55, 58, 88], [35, 71, 89, 7, 5, 44, 44], [5, 94, 47, 69, 28, 73, 92], [97, 35, 99, 16, 7, 97, 57], [57, 62, 20, 72, 3, 46, 33], [38, 25, 39, 11, 24, 94, 72], [72, 30, 23, 88, 34, 62, 99]]>

h.det: 1287560559249.284

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-7.455959978765821e-11, 7.455959978765821e-11]
Average: {'Col 1': 0.0, 'Col 2': -0.0, 'Col 3': 0.0, 'Col 4': -0.0, 'Col 5': 0.0, 'Col 6': -0.0, 'Col 7': 0.0}

 0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 
-0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000 
 0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 
-0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000 
 0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 
-0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000 
 0.0000 -0.0000  0.0000 -0.0000  0.0000 -0.0000  0.0000 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-9, 7]
Average: {'Col 1': 0.0, 'Col 2': -3.5, 'Col 3': -2.5, 'Col 4': 7.0}

-1 -6  4  7 
 1 -1 -9  7 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-1, -6, 4, 7], [1, -1, -9, 7]],inRange=[-9, 7],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [0, 98]
Average: {'Col 1': 72.8, 'Col 2': 52.8, 'Col 3': 43.4, 'Col 4': 50.6, 'Col 5': 45.8}

83  3 88 98 82 
73 51 71 25 45 
83 34 39 26 15 
61 82 19 90 18 
64 94  0 14 69 

p.det:
 83

p.adj:
 
Square matrix
Dimension: 5x5
Numbers' range: [-83, 83]
Average: {'Col 1': 10.2, 'Col 2': -0.6, 'Col 3': 0.6, 'Col 4': -0.6, 'Col 5': 0.6}

 51  -3   3  -3   3 
-73  83 -83  83 -83 
 73 -83  83 -83  83 
-73  83 -83  83 -83 
 73 -83  83 -83  83 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-1.0, 1.0]
Average: {'Col 1': 0.1229, 'Col 2': -0.0072, 'Col 3': 0.0072, 'Col 4': -0.0072, 'Col 5': 0.0072}

 0.6145 -0.0361  0.0361 -0.0361  0.0361 
-0.8795  1.0000 -1.0000  1.0000 -1.0000 
 0.8795 -1.0000  1.0000 -1.0000  1.0000 
-0.8795  1.0000 -1.0000  1.0000 -1.0000 
 0.8795 -1.0000  1.0000 -1.0000  1.0000 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [0, 98]
Average: {'Col 1': 72.8, 'Col 2': 52.8, 'Col 3': 43.4, 'Col 4': 50.6, 'Col 5': 45.8}

83  3 88 98 82 
73 51 71 25 45 
83 34 39 26 15 
61 82 19 90 18 
64 94  0 14 69 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [0, 98]
Average: {'Col 1': 53.25, 'Col 2': 36.5, 'Col 3': 57.0, 'Col 4': 46.0}

 3 88 98 82 
34 39 26 15 
82 19 90 18 
94  0 14 69 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [0, 98]
Average: {'Col 1': 53.25, 'Col 2': 55.0, 'Col 3': 36.5, 'Col 4': 57.0, 'Col 5': 46.0}

 3 55 88 98 82 
34 55 39 26 15 
82 55 19 90 18 
94 55  0 14 69 

################

r: 
Dimension: 5x4
Numbers' range: [0, 98]
Average: {'Col 1': 65.2, 'Col 2': 33.8, 'Col 3': 52.8, 'Col 4': 46.4}

 3 34 82 94 
55 55 55 55 
88 39 19  0 
98 26 90 14 
82 15 18 69 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-63.2996, 33.499599999999994]
Average: {'Col 1': 2.9336, 'Col 2': -13.4269, 'Col 3': -14.9}

-18.3716   6.0319 -63.2996 
 24.2388 -32.8858  33.4996 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.47837607888504863, 1.9292727941647172]
Average: {'Col 1': 1.6148, 'Col 2': 1.5375, 'Col 3': 1.0798}

1.9293 1.7077 1.6813 
1.3004 1.3674 0.4784 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-947.4419, 915.8514]
Average: {'Col 1': 24.7382, 'Col 2': -18.8233, 'Col 3': 13.6691, 'Col 4': -83.482, 'Col 5': 6.1073, 'Col 6': -105.6175}

  -9.1936  -38.0673 -231.9723 -383.2050  915.8514 -947.4419 
 865.1464 -330.1715 -204.6124  -87.4533   85.9112  102.7404 
-208.9383 -260.5091 -177.8435 -101.0692 -242.2826  320.7241 
 245.5404  -11.0560 -333.8380 -301.3895  329.6746   -1.0766 
-791.0453  354.6908  685.0494  191.0314 -419.7879 -470.0097 
  46.9197  172.1731  345.2315  181.1938 -632.7229  361.3587 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: [-947, 915]
Average: {'Col 1': 24.6667, 'Col 2': -18.8333, 'Col 3': 14.1667, 'Col 4': -83.3333, 'Col 5': 6.0, 'Col 6': -105.8333}

  -9  -38 -231 -383  915 -947 
 865 -330 -204  -87   85  102 
-208 -260 -177 -101 -242  320 
 245  -11 -333 -301  329   -1 
-791  354  685  191 -419 -470 
  46  172  345  181 -632  361 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-947.44, 915.85]
Average: {'Col 1': 24.7383, 'Col 2': -18.825, 'Col 3': 13.67, 'Col 4': -83.4817, 'Col 5': 6.1067, 'Col 6': -105.6183}

  -9.1900  -38.0700 -231.9700 -383.2000  915.8500 -947.4400 
 865.1500 -330.1700 -204.6100  -87.4500   85.9100  102.7400 
-208.9400 -260.5100 -177.8400 -101.0700 -242.2800  320.7200 
 245.5400  -11.0600 -333.8400 -301.3900  329.6700   -1.0800 
-791.0500  354.6900  685.0500  191.0300 -419.7900 -470.0100 
  46.9200  172.1700  345.2300  181.1900 -632.7200  361.3600 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-0.9699999999999989, 0.9200000000000017]
Average: {'Col 1': 0.0717, 'Col 2': 0.0083, 'Col 3': -0.4967, 'Col 4': -0.1483, 'Col 5': 0.1067, 'Col 6': 0.215}

-0.1900 -0.0700 -0.9700 -0.2000  0.8500 -0.4400 
 0.1500 -0.1700 -0.6100 -0.4500  0.9100  0.7400 
-0.9400 -0.5100 -0.8400 -0.0700 -0.2800  0.7200 
 0.5400 -0.0600 -0.8400 -0.3900  0.6700 -0.0800 
-0.0500  0.6900  0.0500  0.0300 -0.7900 -0.0100 
 0.9200  0.1700  0.2300  0.1900 -0.7200  0.3600 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [0, 98]
Average: {'Col 1': 67.75, 'Col 2': 28.5, 'Col 3': 52.25, 'Col 4': 44.25}

 3 34 82 94 
88 39 19  0 
98 26 90 14 
82 15 18 69 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [0, 98]
Average: {'Col 1': 89.0, 'Col 2': 29.75, 'Col 3': 36.5, 'Col 4': 20.75}

88 39 19  0 
88 39 19  0 
98 26 90 14 
82 15 18 69 

r.rank: 4
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: [-7, 6]
Average: {'Col 1': 0.0, 'Col 2': -1.0, 'Col 3': -3.0, 'Col 4': 3.0}

 0 -2  1  0 
 0  0 -7  6 

################

a<b
Invalid
None

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: [-5, 352]
Average: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: [5, 659]
Average: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

