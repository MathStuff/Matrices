# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix
a=Matrix(0)
v=Matrix()
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q,v,a,k,l,m]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.echelon.p")
f.echelon.p
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange:\n",g.inRange)
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\na<b")
print(a<b)

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: [4, 4]
Average: {'Col 1': 4.0}

4 


Dimension: 2x4
Numbers' range: [-9, 9]
Average: {'Col 1': 1.0, 'Col 2': 7.0, 'Col 3': 6.0, 'Col 4': -2.5}

 2  5  3 -9 
 0  9  9  4 


Float Matrix
Dimension: 4x3
Numbers' range: [-6.5221, 4.6901]
Average: {'Col 1': -2.9799, 'Col 2': 0.9432, 'Col 3': 0.8078}

 0.0000  0.8255 -0.8316 
-6.5221 -0.4857 -1.6339 
-1.3138  0.6734  1.0065 
-4.0838  2.7596  4.6901 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-911.4299, 942.8403]
Average: {'Col 1': -163.1198, 'Col 2': -33.245, 'Col 3': -33.2105, 'Col 4': -26.8643, 'Col 5': -73.0751, 'Col 6': 55.009}

 -64.7042 -162.4274  187.1066 -271.1019  -71.7109 -155.2138 
-303.7992  262.6576 -141.8239 -143.2657 -270.3914  250.3872 
-911.4299 -312.5546 -659.8779  153.0709  285.3586  172.3884 
  37.5384  368.9366  942.8403 -229.6545  543.2064   59.7448 
  50.2091 -284.2395  -35.7512 -258.9312 -829.2676   97.6123 
 213.4670  -71.8428 -491.7569  588.6966  -95.6457  -94.8649 


Dimension: 3x6
Numbers' range: [-7, 10]
Average: {'Col 1': 5.3333, 'Col 2': 4.0, 'Col 3': -2.6667, 'Col 4': -0.6667, 'Col 5': 3.3333, 'Col 6': 4.6667}

 2 10  4 -7  6  5 
 9  7 -5 -2  8  7 
 5 -5 -7  7 -4  2 


Square matrix
Dimension: 5x5
Numbers' range: [1, 98]
Average: {'Col 1': 57.2, 'Col 2': 32.4, 'Col 3': 44.0, 'Col 4': 48.4, 'Col 5': 84.0}

69 15 62 71 73 
32 22  3  1 97 
57 30 36 94 75 
30 16 39 47 81 
98 79 80 29 94 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-5.5027, 4.1063]
Average: {'Col 1': -1.0474, 'Col 2': -1.7289, 'Col 3': -1.5806, 'Col 4': 1.3177}

-5.5027 -3.1784 -0.2719  1.5927 
 0.0000 -0.6865 -3.1456 -1.6237 
 1.4687 -3.0508  0.2865  1.1955 
-0.1555  0.0000 -3.1913  4.1063 

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: [-52, 88]
Average: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: [-5, 352]
Average: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: [5, 659]
Average: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: [9, 193]
Average: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-6.5221, 4.6901]
Average: {'Col 1': -2.9799, 'Col 2': 0.9432, 'Col 3': 0.8078}

 0.0000  0.8255 -0.8316 
-6.5221 -0.4857 -1.6339 
-1.3138  0.6734  1.0065 
-4.0838  2.7596  4.6901 

d.matrix:

[[0.0, 0.8255, -0.8316], [-6.5221, -0.4857, -1.6339], [-1.3138, 0.6734, 1.0065], [-4.0838, 2.7596, 4.6901]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-659.8779, 942.8403]
Average: {'Col 1': 39.1531, 'Col 2': 82.0613}

-162.4274  187.1066 
 262.6576 -141.8239 
-312.5546 -659.8779 
 368.9366  942.8403 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-911.4299, 942.8403]
Average: {'Col 1': -163.1198, 'Col 2': -33.245, 'Col 3': -33.2105, 'Col 4': -26.8643, 'Col 5': -73.0751, 'Col 6': 55.009}

 -64.7042 -162.4274  187.1066 -271.1019  -71.7109 -155.2138 
-303.7992  262.6576 -141.8239 -143.2657 -270.3914  250.3872 
-911.4299 -312.5546 -659.8779  153.0709  285.3586  172.3884 
  37.5384  368.9366  942.8403 -229.6545  543.2064   59.7448 
  50.2091 -284.2395  -35.7512 -258.9312 -829.2676   97.6123 
 213.4670  -71.8428 -491.7569  588.6966  -95.6457  -94.8649 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-911.4299, 942.8403]
Average: {'Col 1': -163.1198, 'Col 2': -33.245, 'Col 3': -33.2105, 'Col 4': -26.8643, 'Col 5': -73.0751, 'Col 6': 55.009}

 -64.7042 -162.4274  187.1066 -271.1019  -71.7109 -155.2138 
-303.7992  262.6576 -141.8239 -143.2657 -270.3914  250.3872 
-911.4299 -312.5546 -659.8779  153.0709  285.3586  172.3884 
  37.5384  368.9366  942.8403 -229.6545  543.2064   59.7448 
  50.2091 -284.2395  -35.7512 -258.9312 -829.2676   97.6123 
 213.4670  -71.8428 -491.7569  588.6966  -95.6457  -94.8649 

f.echelon.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1329.622, 1795.4284752600001]
Average: {'Col 1': -10.784, 'Col 2': 143.81, 'Col 3': -360.4735, 'Col 4': 625.5361, 'Col 5': 386.5709, 'Col 6': 243.1143}

  -64.7042  -162.4276   187.1064  -271.1022   -71.7110  -155.2137 
    0.0000  1025.2878 -1020.3254  1129.6108    66.3054   979.1498 
    0.0000     0.0000 -1329.6220  1795.4285  1167.7405   472.2153 
    0.0000     0.0000     0.0000  1099.2795  1647.3143   177.8414 
    0.0000     0.0000     0.0000     0.0000  -490.2235   330.9303 
    0.0000     0.0000     0.0000     0.0000     0.0000  -346.2371 

################
g.dim:
 [3, 6]
g.inRange:
 [-7, 10]
g: 
Dimension: 3x6
Numbers' range: [-7, 10]
Average: {'Col 1': 5.3333, 'Col 2': 4.0, 'Col 3': -2.6667, 'Col 4': -0.6667, 'Col 5': 3.3333, 'Col 6': 4.6667}

 2 10  4 -7  6  5 
 9  7 -5 -2  8  7 
 5 -5 -7  7 -4  2 

g.remove(3):

Dimension: 2x6
Numbers' range: [-7, 10]
Average: {'Col 1': 5.5, 'Col 2': 8.5, 'Col 3': -0.5, 'Col 4': -4.5, 'Col 5': 7.0, 'Col 6': 6.0}

 2 10  4 -7  6  5 
 9  7 -5 -2  8  7 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: <bound method Matrix.avg of [[96, 35, 31, 47, 55, 58, 88], [35, 71, 89, 7, 5, 44, 44], [5, 94, 47, 69, 28, 73, 92], [97, 35, 99, 16, 7, 97, 57], [57, 62, 20, 72, 3, 46, 33], [38, 25, 39, 11, 24, 94, 72], [72, 30, 23, 88, 34, 62, 99]]>

h.det: 1287560559249.284

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-0.07445861116967724, 0.0709813461259459]
Average: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-7, 10]
Average: {'Col 1': 5.5, 'Col 2': 8.5, 'Col 3': -0.5, 'Col 4': -4.5}

 2 10  4 -7 
 9  7 -5 -2 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[2, 10, 4, -7], [9, 7, -5, -2]],inRange=[-7, 10],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [1, 98]
Average: {'Col 1': 57.2, 'Col 2': 32.4, 'Col 3': 44.0, 'Col 4': 48.4, 'Col 5': 84.0}

69 15 62 71 73 
32 22  3  1 97 
57 30 36 94 75 
30 16 39 47 81 
98 79 80 29 94 

p.det:
 567599717.1594037

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-23580579.2967, 15900218.1809]
Average: {'Col 1': -1103187.1609, 'Col 2': -1006457.0438, 'Col 3': 1117605.2055, 'Col 4': 1075559.4413, 'Col 5': 1284474.6032}

 14967758.4938   8636134.9049    609819.0761 -23580579.2967   -702723.6168 
-17954496.0230  -4981231.6765   8597064.2184   5321640.1381   7638592.3321 
  1612652.3431  -9631689.5247  -9973734.8866  15900218.1809   2943247.2890 
 -3259951.1050  -3521999.1132   8282812.5507   1673366.3337  -1884498.8257 
  -881899.5135   4466500.1907  -1927934.9310   6063151.8505  -1572244.1627 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-0.041544381689812705, 0.028013083340622264]
Average: {'Col 1': -0.0019, 'Col 2': -0.0018, 'Col 3': 0.002, 'Col 4': 0.0019, 'Col 5': 0.0023}

 0.0264  0.0152  0.0011 -0.0415 -0.0012 
-0.0316 -0.0088  0.0151  0.0094  0.0135 
 0.0028 -0.0170 -0.0176  0.0280  0.0052 
-0.0057 -0.0062  0.0146  0.0029 -0.0033 
-0.0016  0.0079 -0.0034  0.0107 -0.0028 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [1, 98]
Average: {'Col 1': 57.2, 'Col 2': 32.4, 'Col 3': 44.0, 'Col 4': 48.4, 'Col 5': 84.0}

69 15 62 71 73 
32 22  3  1 97 
57 30 36 94 75 
30 16 39 47 81 
98 79 80 29 94 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [15, 94]
Average: {'Col 1': 35.0, 'Col 2': 54.25, 'Col 3': 60.25, 'Col 4': 80.75}

15 62 71 73 
30 36 94 75 
16 39 47 81 
79 80 29 94 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [15, 94]
Average: {'Col 1': 35.0, 'Col 2': 55.0, 'Col 3': 54.25, 'Col 4': 60.25, 'Col 5': 80.75}

15 55 62 71 73 
30 55 36 94 75 
16 55 39 47 81 
79 55 80 29 94 

################

r: 
Dimension: 5x4
Numbers' range: [15, 94]
Average: {'Col 1': 55.2, 'Col 2': 58.0, 'Col 3': 47.6, 'Col 4': 67.4}

15 30 16 79 
55 55 55 55 
62 36 39 80 
71 94 47 29 
73 75 81 94 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-86.8583, 13.1138]
Average: {'Col 1': -43.328, 'Col 2': -5.433, 'Col 3': -17.9551}

  0.2023 -23.5937 -49.0241 
-86.8583  12.7277  13.1138 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.1362386387118022, 1.6331877526827157]
Average: {'Col 1': 0.652, 'Col 2': 1.3592, 'Col 3': 0.7561}

1.1678 1.0851 0.5276 
0.1362 1.6332 0.9846 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-911.4299, 942.8403]
Average: {'Col 1': -163.1198, 'Col 2': -33.245, 'Col 3': -33.2105, 'Col 4': -26.8643, 'Col 5': -73.0751, 'Col 6': 55.009}

 -64.7042 -162.4274  187.1066 -271.1019  -71.7109 -155.2138 
-303.7992  262.6576 -141.8239 -143.2657 -270.3914  250.3872 
-911.4299 -312.5546 -659.8779  153.0709  285.3586  172.3884 
  37.5384  368.9366  942.8403 -229.6545  543.2064   59.7448 
  50.2091 -284.2395  -35.7512 -258.9312 -829.2676   97.6123 
 213.4670  -71.8428 -491.7569  588.6966  -95.6457  -94.8649 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: [-911, 942]
Average: {'Col 1': -163.0, 'Col 2': -33.1667, 'Col 3': -32.8333, 'Col 4': -26.6667, 'Col 5': -72.8333, 'Col 6': 54.8333}

 -64 -162  187 -271  -71 -155 
-303  262 -141 -143 -270  250 
-911 -312 -659  153  285  172 
  37  368  942 -229  543   59 
  50 -284  -35 -258 -829   97 
 213  -71 -491  588  -95  -94 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-911.43, 942.84]
Average: {'Col 1': -163.1183, 'Col 2': -33.2433, 'Col 3': -33.21, 'Col 4': -26.8633, 'Col 5': -73.075, 'Col 6': 55.01}

 -64.7000 -162.4300  187.1100 -271.1000  -71.7100 -155.2100 
-303.8000  262.6600 -141.8200 -143.2700 -270.3900  250.3900 
-911.4300 -312.5500 -659.8800  153.0700  285.3600  172.3900 
  37.5400  368.9400  942.8400 -229.6500  543.2100   59.7400 
  50.2100 -284.2400  -35.7500 -258.9300 -829.2700   97.6100 
 213.4700  -71.8400 -491.7600  588.7000  -95.6500  -94.8600 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-0.9300000000000068, 0.9399999999999977]
Average: {'Col 1': -0.1183, 'Col 2': -0.0767, 'Col 3': -0.3767, 'Col 4': -0.1967, 'Col 5': -0.2417, 'Col 6': 0.1767}

-0.7000 -0.4300  0.1100 -0.1000 -0.7100 -0.2100 
-0.8000  0.6600 -0.8200 -0.2700 -0.3900  0.3900 
-0.4300 -0.5500 -0.8800  0.0700  0.3600  0.3900 
 0.5400  0.9400  0.8400 -0.6500  0.2100  0.7400 
 0.2100 -0.2400 -0.7500 -0.9300 -0.2700  0.6100 
 0.4700 -0.8400 -0.7600  0.7000 -0.6500 -0.8600 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [15, 94]
Average: {'Col 1': 55.25, 'Col 2': 58.75, 'Col 3': 45.75, 'Col 4': 70.5}

15 30 16 79 
62 36 39 80 
71 94 47 29 
73 75 81 94 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [29, 94]
Average: {'Col 1': 67.0, 'Col 2': 60.25, 'Col 3': 51.5, 'Col 4': 70.75}

62 36 39 80 
62 36 39 80 
71 94 47 29 
73 75 81 94 

r.rank: 4
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: [-2, 5]
Average: {'Col 1': 0.0, 'Col 2': 3.5, 'Col 3': 1.0, 'Col 4': -1.0}

 0  5  3 -2 
 0  2 -1  0 

################

a<b
Invalid
None

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: [-5, 352]
Average: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: [5, 659]
Average: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

