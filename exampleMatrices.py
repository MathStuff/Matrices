# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",header=1)

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")#There is a %0.001 error due to rounding
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange():\n",g.inRange())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg():",h.avg())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [3, 3]}
Averages: {'Col 1': 3.0}

3 


Dimension: 2x4
Numbers' range: {'Col 1': [-12, 44], 'Col 2': [-37, 5], 'Col 3': [-36, 5], 'Col 4': [-20, 16]}
Averages: {'Col 1': 16.0, 'Col 2': -16.0, 'Col 3': -15.5, 'Col 4': -2.0}

 44   5   5  16 
-12 -37 -36 -20 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-4.5959, 1.8008], 'Col 2': [-3.8463, 0.2198], 'Col 3': [-0.4329, 4.8345]}
Averages: {'Col 1': -1.5457, 'Col 2': -1.4587, 'Col 3': 2.9929}

 0.7883 -2.0914  3.7461 
-4.5959 -3.8463  4.8345 
 1.8008  0.2198  3.8241 
-4.1761 -0.1168 -0.4329 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-926.7604, 1184.2746], 'Col 2': [-930.1166, 820.8935], 'Col 3': [-1127.969, 105.4035], 'Col 4': [-981.9761, 1217.923], 'Col 5': [-722.8007, 1191.6078], 'Col 6': [-154.042, 1139.0785]}
Averages: {'Col 1': 415.3842, 'Col 2': 100.7824, 'Col 3': -306.3657, 'Col 4': -21.6159, 'Col 5': 199.072, 'Col 6': 387.9072}

  708.7032   820.8935   105.4035  -128.6369  -722.8007  -154.0420 
  398.0052  -930.1166   -44.7561  -981.9761  1191.6078    29.9795 
 -926.7604  -212.0740  -300.0366  -527.5506   -78.8547   873.2277 
  303.0633   457.3680  -270.3786  -838.3458   402.6807  1139.0785 
  825.0193   -32.5498  -200.4571  1128.8907    62.4847    81.2938 
 1184.2746   501.1733 -1127.9690  1217.9230   339.3144   357.9060 


Dimension: 3x6
Numbers' range: {'Col 1': [2, 3], 'Col 2': [7, 10], 'Col 3': [3, 8], 'Col 4': [3, 7], 'Col 5': [3, 8], 'Col 6': [9, 10]}
Averages: {'Col 1': 2.3333, 'Col 2': 8.6667, 'Col 3': 5.0, 'Col 4': 5.6667, 'Col 5': 6.3333, 'Col 6': 9.6667}

 2 10  3  7  8 10 
 2  7  8  3  3  9 
 3  9  4  7  8 10 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [14, 98], 'Col 2': [33, 94], 'Col 3': [39, 72], 'Col 4': [27, 94], 'Col 5': [14, 100]}
Averages: {'Col 1': 57.4, 'Col 2': 65.8, 'Col 3': 60.2, 'Col 4': 63.6, 'Col 5': 64.8}

 98  94  39  71  97 
 89  75  72  39  22 
 21  41  61  87 100 
 65  86  64  94  14 
 14  33  65  27  91 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [-2.8515, 4.3603], 'Col 2': [-3.826, 4.1167], 'Col 3': [-4.265, 1.7706], 'Col 4': [-3.8994, 2.9376]}
Averages: {'Col 1': -0.1583, 'Col 2': 0.2095, 'Col 3': -0.8397, 'Col 4': -0.544}

-2.8515  4.1167 -1.2389  2.9376 
-1.2046 -2.6232 -4.2650 -2.3565 
 4.3603 -3.8260  1.7706  1.1423 
-0.9374  3.1707  0.3743 -3.8994 


Square matrix
Dimension: 3x3
Numbers' range: {'Col 1': [3, 8], 'Col 2': [2, 5], 'Col 3': [4, 7]}
Averages: {'Col 1': 5.3333, 'Col 2': 3.3333, 'Col 3': 5.3333}

3 5 7 
8 3 4 
5 2 5 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [-3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 15.0}

 34 -52  33 
  9  88  -3 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Numbers' range: {'Col 1': [312, 312], 'Col 2': [45, 45], 'Col 3': [12, 12], 'Col 4': [44, 44], 'Col 5': [352, 352], 'Col 6': [45, 45], 'Col 7': [12, 12], 'Col 8': [44, 44], 'Col 9': [3, 3], 'Col 10': [-5, -5]}
Averages: {'Col 1': 312.0, 'Col 2': 45.0, 'Col 3': 12.0, 'Col 4': 44.0, 'Col 5': 352.0, 'Col 6': 45.0, 'Col 7': 12.0, 'Col 8': 44.0, 'Col 9': 3.0, 'Col 10': -5.0}

312  45  12  44 352  45  12  44   3  -5 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'ulke': [125, 193], 'boy': [30, 105], 'kilo': [9, 55]}
Averages: {'ulke': 163.3636, 'boy': 62.1364, 'kilo': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-4.5959, 1.8008], 'Col 2': [-3.8463, 0.2198], 'Col 3': [-0.4329, 4.8345]}
Averages: {'Col 1': -1.5457, 'Col 2': -1.4587, 'Col 3': 2.9929}

 0.7883 -2.0914  3.7461 
-4.5959 -3.8463  4.8345 
 1.8008  0.2198  3.8241 
-4.1761 -0.1168 -0.4329 

d.matrix:

[[0.7883, -2.0914, 3.7461], [-4.5959, -3.8463, 4.8345], [1.8008, 0.2198, 3.8241], [-4.1761, -0.1168, -0.4329]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [-930.1166, 820.8935], 'Col 2': [-300.0366, 105.4035]}
Averages: {'Col 1': 34.0177, 'Col 2': -127.442}

 820.8935  105.4035 
-930.1166  -44.7561 
-212.0740 -300.0366 
 457.3680 -270.3786 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-926.7604, 1184.2746], 'Col 2': [-930.1166, 820.8935], 'Col 3': [-1127.969, 105.4035], 'Col 4': [-981.9761, 1217.923], 'Col 5': [-722.8007, 1191.6078], 'Col 6': [-154.042, 1139.0785]}
Averages: {'Col 1': 415.3842, 'Col 2': 100.7824, 'Col 3': -306.3657, 'Col 4': -21.6159, 'Col 5': 199.072, 'Col 6': 387.9072}

  708.7032   820.8935   105.4035  -128.6369  -722.8007  -154.0420 
  398.0052  -930.1166   -44.7561  -981.9761  1191.6078    29.9795 
 -926.7604  -212.0740  -300.0366  -527.5506   -78.8547   873.2277 
  303.0633   457.3680  -270.3786  -838.3458   402.6807  1139.0785 
  825.0193   -32.5498  -200.4571  1128.8907    62.4847    81.2938 
 1184.2746   501.1733 -1127.9690  1217.9230   339.3144   357.9060 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-926.7604, 1184.2746], 'Col 2': [-930.1166, 820.8935], 'Col 3': [-1127.969, 105.4035], 'Col 4': [-981.9761, 1217.923], 'Col 5': [-722.8007, 1191.6078], 'Col 6': [-154.042, 1139.0785]}
Averages: {'Col 1': 415.3842, 'Col 2': 100.7824, 'Col 3': -306.3657, 'Col 4': -21.6159, 'Col 5': 199.072, 'Col 6': 387.9072}

  708.7032   820.8935   105.4035  -128.6369  -722.8007  -154.0420 
  398.0052  -930.1166   -44.7561  -981.9761  1191.6078    29.9795 
 -926.7604  -212.0740  -300.0366  -527.5506   -78.8547   873.2277 
  303.0633   457.3680  -270.3786  -838.3458   402.6807  1139.0785 
  825.0193   -32.5498  -200.4571  1128.8907    62.4847    81.2938 
 1184.2746   501.1733 -1127.9690  1217.9230   339.3144   357.9060 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0, 708.7032], 'Col 2': [-1391.1275, 820.8935], 'Col 3': [-226.5688, 105.4035], 'Col 4': [-1259.0809, 944.3041], 'Col 5': [-3290.1583, 1597.5301], 'Col 6': [-2253.2174, 743.9201]}
Averages: {'Col 1': 118.1172, 'Col 2': -95.039, 'Col 3': -37.5193, 'Col 4': -225.5246, 'Col 5': -261.1098, 'Col 6': -428.0782}

  708.7032   820.8935   105.4035  -128.6369  -722.8007  -154.0420 
    0.0000 -1391.1275  -103.9503  -909.7341  1597.5301   116.4889 
    0.0000     0.0000  -226.5688 -1259.0809   -34.8483   743.9201 
    0.0000     0.0000     0.0000   944.3041   883.6187   152.0056 
    0.0000     0.0000     0.0000     0.0000 -3290.1583 -1173.6245 
    0.0000     0.0000     0.0000     0.0000     0.0000 -2253.2174 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1.3077, 1.671], 'Col 2': [-0.6192, 1], 'Col 3': [0, 5.4688], 'Col 4': [0, 9.412], 'Col 5': [0, 2.3034], 'Col 6': [0, 1]}
Averages: {'Col 1': 0.5861, 'Col 2': 0.2734, 'Col 3': 1.4994, 'Col 4': 2.3196, 'Col 5': 0.5506, 'Col 6': 0.1667}

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.5616  1.0000  0.0000  0.0000  0.0000  0.0000 
-1.3077 -0.6192  1.0000  0.0000  0.0000  0.0000 
 0.4276 -0.0764  1.4274  1.0000  0.0000  0.0000 
 1.1641  0.7103  1.1004  3.5056  1.0000  0.0000 
 1.6710  0.6258  5.4688  9.4120  2.3034  1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.0, 0.0], 'Col 2': [0.0, 0.0], 'Col 3': [0.0, 0.0], 'Col 4': [0.0, 0.0], 'Col 5': [0.0, 0.0], 'Col 6': [0.0, 0.0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0}

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 

################
g.dim:
 [3, 6]
g.inRange():
 {'Col 1': [2, 3], 'Col 2': [7, 10], 'Col 3': [3, 8], 'Col 4': [3, 7], 'Col 5': [3, 8], 'Col 6': [9, 10]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [2, 3], 'Col 2': [7, 10], 'Col 3': [3, 8], 'Col 4': [3, 7], 'Col 5': [3, 8], 'Col 6': [9, 10]}
Averages: {'Col 1': 2.3333, 'Col 2': 8.6667, 'Col 3': 5.0, 'Col 4': 5.6667, 'Col 5': 6.3333, 'Col 6': 9.6667}

 2 10  3  7  8 10 
 2  7  8  3  3  9 
 3  9  4  7  8 10 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [2, 2], 'Col 2': [7, 10], 'Col 3': [3, 8], 'Col 4': [3, 7], 'Col 5': [3, 8], 'Col 6': [9, 10]}
Averages: {'Col 1': 2.0, 'Col 2': 8.5, 'Col 3': 5.5, 'Col 4': 5.0, 'Col 5': 5.5, 'Col 6': 9.5}

 2 10  3  7  8 10 
 2  7  8  3  3  9 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg(): {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [0, 1.0], 'Col 2': [0, 1.0], 'Col 3': [0, 1.0], 'Col 4': [0, 1.0], 'Col 5': [0, 1.0], 'Col 6': [0, 1.0], 'Col 7': [0, 1.0]}
Averages: {'Col 1': 0.1429, 'Col 2': 0.1429, 'Col 3': 0.1429, 'Col 4': 0.1429, 'Col 5': 0.1429, 'Col 6': 0.1429, 'Col 7': 0.1429}

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [35, 97], 'Col 2': [25, 71], 'Col 3': [20, 99], 'Col 4': [3, 55], 'Col 5': [44, 97], 'Col 6': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [2, 2], 'Col 2': [7, 10], 'Col 3': [3, 8], 'Col 4': [3, 7]}
Averages: {'Col 1': 2.0, 'Col 2': 8.5, 'Col 3': 5.5, 'Col 4': 5.0}

 2 10  3  7 
 2  7  8  3 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[2, 10, 3, 7], [2, 7, 8, 3]],ranged=[-5, 5],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [14, 98], 'Col 2': [33, 94], 'Col 3': [39, 72], 'Col 4': [27, 94], 'Col 5': [14, 100]}
Averages: {'Col 1': 57.4, 'Col 2': 65.8, 'Col 3': 60.2, 'Col 4': 63.6, 'Col 5': 64.8}

 98  94  39  71  97 
 89  75  72  39  22 
 21  41  61  87 100 
 65  86  64  94  14 
 14  33  65  27  91 

p.det:
 1026823633.0000007

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-13468854.0, 12716413.0], 'Col 2': [-35343962.0, 28975598.0], 'Col 3': [-44722108.0, 23442726.0], 'Col 4': [-25542119.0, 35335150.0], 'Col 5': [-29088902.0, 38698833.0]}
Averages: {'Col 1': 395720.4, 'Col 2': 1623148.8, 'Col 3': 1465676.0, 'Col 4': -100275.4, 'Col 5': -152672.2}

   236536.0000  28975598.0000  23442726.0000 -25542119.0000 -29088902.0000 
 12716413.0000 -35343962.0000 -44722108.0000  35335150.0000  38698833.0000 
-13468854.0000  14667859.0000   5841243.0000  -2699358.0000   4807172.0000 
 -3523785.0000   2749955.0000  20371916.0000   -908399.0000 -19155669.0000 
  6018292.0000  -2933706.0000   2394603.0000  -6686651.0000   3975205.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.0131, 0.0124], 'Col 2': [-0.0344, 0.0282], 'Col 3': [-0.0436, 0.0228], 'Col 4': [-0.0249, 0.0344], 'Col 5': [-0.0283, 0.0377]}
Averages: {'Col 1': 0.0004, 'Col 2': 0.0016, 'Col 3': 0.0014, 'Col 4': -0.0001, 'Col 5': -0.0001}

 0.0002  0.0282  0.0228 -0.0249 -0.0283 
 0.0124 -0.0344 -0.0436  0.0344  0.0377 
-0.0131  0.0143  0.0057 -0.0026  0.0047 
-0.0034  0.0027  0.0198 -0.0009 -0.0187 
 0.0059 -0.0029  0.0023 -0.0065  0.0039 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [14, 98], 'Col 2': [33, 94], 'Col 3': [39, 72], 'Col 4': [27, 94], 'Col 5': [14, 100]}
Averages: {'Col 1': 57.4, 'Col 2': 65.8, 'Col 3': 60.2, 'Col 4': 63.6, 'Col 5': 64.8}

 98  94  39  71  97 
 89  75  72  39  22 
 21  41  61  87 100 
 65  86  64  94  14 
 14  33  65  27  91 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [33, 94], 'Col 2': [39, 65], 'Col 3': [27, 94], 'Col 4': [14, 100]}
Averages: {'Col 1': 63.5, 'Col 2': 57.25, 'Col 3': 69.75, 'Col 4': 75.5}

 94  39  71  97 
 41  61  87 100 
 86  64  94  14 
 33  65  27  91 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [33, 94], 'Col 2': [55, 55], 'Col 3': [39, 65], 'Col 4': [27, 94], 'Col 5': [14, 100]}
Averages: {'Col 1': 63.5, 'Col 2': 55.0, 'Col 3': 57.25, 'Col 4': 69.75, 'Col 5': 75.5}

 94  55  39  71  97 
 41  55  61  87 100 
 86  55  64  94  14 
 33  55  65  27  91 

p.sdev()
{'Col 1': 30.946189857019014, 'Col 2': 0.0, 'Col 3': 12.284814474246922, 'Col 4': 30.081832834231804, 'Col 5': 41.1703777004778}
################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [39, 97], 'Col 2': [41, 100], 'Col 3': [14, 94], 'Col 4': [27, 91]}
Averages: {'Col 1': 71.2, 'Col 2': 68.8, 'Col 3': 62.6, 'Col 4': 54.2}

 94  41  86  33 
 55  55  55  55 
 39  61  64  65 
 71  87  94  27 
 97 100  14  91 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################
id4: 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.addDim(10)):
 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-46.1079, 179.2819], 'Col 2': [-112.0229, 161.8331], 'Col 3': [-352.8393, 201.195]}
Averages: {'Col 1': 66.587, 'Col 2': 24.9051, 'Col 3': -75.8221}

 -46.1079 -112.0229  201.1950 
 179.2819  161.8331 -352.8393 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [0.7081, 1.5463], 'Col 2': [0.8207, 1.4101], 'Col 3': [0.6559, 1.8266]}
Averages: {'Col 1': 1.1272, 'Col 2': 1.1154, 'Col 3': 1.2412}

1.5463 1.4101 0.6559 
0.7081 0.8207 1.8266 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-926.7604, 1184.2746], 'Col 2': [-930.1166, 820.8935], 'Col 3': [-1127.969, 105.4035], 'Col 4': [-981.9761, 1217.923], 'Col 5': [-722.8007, 1191.6078], 'Col 6': [-154.042, 1139.0785]}
Averages: {'Col 1': 415.3842, 'Col 2': 100.7824, 'Col 3': -306.3657, 'Col 4': -21.6159, 'Col 5': 199.072, 'Col 6': 387.9072}

  708.7032   820.8935   105.4035  -128.6369  -722.8007  -154.0420 
  398.0052  -930.1166   -44.7561  -981.9761  1191.6078    29.9795 
 -926.7604  -212.0740  -300.0366  -527.5506   -78.8547   873.2277 
  303.0633   457.3680  -270.3786  -838.3458   402.6807  1139.0785 
  825.0193   -32.5498  -200.4571  1128.8907    62.4847    81.2938 
 1184.2746   501.1733 -1127.9690  1217.9230   339.3144   357.9060 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-926, 1184], 'Col 2': [-930, 820], 'Col 3': [-1127, 105], 'Col 4': [-981, 1217], 'Col 5': [-722, 1191], 'Col 6': [-154, 1139]}
Averages: {'Col 1': 415.3333, 'Col 2': 100.6667, 'Col 3': -306.0, 'Col 4': -21.5, 'Col 5': 199.0, 'Col 6': 387.5}

  708   820   105  -128  -722  -154 
  398  -930   -44  -981  1191    29 
 -926  -212  -300  -527   -78   873 
  303   457  -270  -838   402  1139 
  825   -32  -200  1128    62    81 
 1184   501 -1127  1217   339   357 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-926.76, 1184.27], 'Col 2': [-930.12, 820.89], 'Col 3': [-1127.97, 105.4], 'Col 4': [-981.98, 1217.92], 'Col 5': [-722.8, 1191.61], 'Col 6': [-154.04, 1139.08]}
Averages: {'Col 1': 415.3833, 'Col 2': 100.7817, 'Col 3': -306.3683, 'Col 4': -21.6183, 'Col 5': 199.0717, 'Col 6': 387.9083}

  708.7000   820.8900   105.4000  -128.6400  -722.8000  -154.0400 
  398.0100  -930.1200   -44.7600  -981.9800  1191.6100    29.9800 
 -926.7600  -212.0700  -300.0400  -527.5500   -78.8500   873.2300 
  303.0600   457.3700  -270.3800  -838.3500   402.6800  1139.0800 
  825.0200   -32.5500  -200.4600  1128.8900    62.4800    81.2900 
 1184.2700   501.1700 -1127.9700  1217.9200   339.3100   357.9100 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.76, 0.7], 'Col 2': [-0.55, 0.89], 'Col 3': [-0.97, 0.4], 'Col 4': [-0.98, 0.92], 'Col 5': [-0.85, 0.68], 'Col 6': [-0.04, 0.98]}
Averages: {'Col 1': 0.05, 'Col 2': 0.115, 'Col 3': -0.3683, 'Col 4': -0.1183, 'Col 5': 0.0717, 'Col 6': 0.4083}

 0.7000  0.8900  0.4000 -0.6400 -0.8000 -0.0400 
 0.0100 -0.1200 -0.7600 -0.9800  0.6100  0.9800 
-0.7600 -0.0700 -0.0400 -0.5500 -0.8500  0.2300 
 0.0600  0.3700 -0.3800 -0.3500  0.6800  0.0800 
 0.0200 -0.5500 -0.4600  0.8900  0.4800  0.2900 
 0.2700  0.1700 -0.9700  0.9200  0.3100  0.9100 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [39, 97], 'Col 2': [41, 100], 'Col 3': [14, 94], 'Col 4': [27, 91]}
Averages: {'Col 1': 75.25, 'Col 2': 72.25, 'Col 3': 64.5, 'Col 4': 54.0}

 94  41  86  33 
 39  61  64  65 
 71  87  94  27 
 97 100  14  91 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [39, 97], 'Col 2': [61, 100], 'Col 3': [14, 94], 'Col 4': [27, 91]}
Averages: {'Col 1': 61.5, 'Col 2': 77.25, 'Col 3': 59.0, 'Col 4': 62.0}

 39  61  64  65 
 39  61  64  65 
 71  87  94  27 
 97 100  14  91 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 99], 'Col 2': [0, 99], 'Col 3': [0, 99], 'Col 4': [0, 99], 'Col 5': [0, 99], 'Col 6': [0, 99], 'Col 7': [0, 99], 'Col 8': [0, 99]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: {'Col 1': [0, 0], 'Col 2': [5, 5], 'Col 3': [2, 4], 'Col 4': [1, 2]}
Averages: {'Col 1': 0.0, 'Col 2': 5.0, 'Col 3': 3.0, 'Col 4': 1.5}

0 5 2 2 
0 5 4 1 

################

f.roundForm(3)>f.roundForm(1)
False

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [-3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 15.0}

 34 -52  33 
  9  88  -3 

################
validStr2:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Numbers' range: {'Col 1': [312, 312], 'Col 2': [45, 45], 'Col 3': [12, 12], 'Col 4': [44, 44], 'Col 5': [352, 352], 'Col 6': [45, 45], 'Col 7': [12, 12], 'Col 8': [44, 44], 'Col 9': [3, 3], 'Col 10': [-5, -5]}
Averages: {'Col 1': 312.0, 'Col 2': 45.0, 'Col 3': 12.0, 'Col 4': 44.0, 'Col 5': 352.0, 'Col 6': 45.0, 'Col 7': 12.0, 'Col 8': 44.0, 'Col 9': 3.0, 'Col 10': -5.0}

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'ulke': [125, 193], 'boy': [30, 105], 'kilo': [9, 55]}
Averages: {'ulke': 163.3636, 'boy': 62.1364, 'kilo': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

