# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix
a=Matrix(0)
v=Matrix()
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q,v,a,k,l,m]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""ATTRIBUTE CALL EXAMPLES"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)
print('\n################\n')
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print('################')
print("proj.dim:\n",proj.dim)
print('################')
print("validStr2.inRange:\n",validStr2.inRange)
print('################')
print("g:",g)
print('################')
print("g.remove(3):")
g.remove(3)
print(g)
print('################')
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)
print('\n################')
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)
print('################')
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)
print('################')
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)
print("################")
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)
print('\n################')
print("id3:\n")
print(id3)
print('################')
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))
print('################')
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================
print("################################")
print("Operator examples")
print("################")
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))
print("################\n")
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    
print("################")
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)
print("################")
print("\nc%j")
print(c%j)
print("################")
print("\na<b")
print(a<b)
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: 47.3350

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: [3, 3]
Average: 3.0000

3 


Dimension: 2x4
Numbers' range: [-9, 10]
Average: 1.8750

-4 -2 -2  7 
 6  9 -9 10 


Float Matrix
Dimension: 4x3
Numbers' range: [-6.3509, 5.4201]
Average: -0.1061

-5.3502 -0.1642  0.9718 
-0.2532  1.9576 -0.3076 
 3.2298  5.4201  2.0875 
-6.3509 -1.8916 -0.6217 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1154.1563, 1013.5677]
Average: 97.9115

  468.0170   200.1096   527.6148   116.3625  1013.5677   -79.1416 
 -226.5926  -457.8657     5.9316   925.8804   -56.7368  -572.9785 
   -6.0977     8.3558     3.2319    15.9165  -441.9383   418.7598 
    4.0847   792.2484   -85.2421   186.0924 -1154.1563    28.5956 
 -177.1163   211.4958   597.4090   390.7108   218.2238    69.0748 
  491.6937   138.4956  -151.1502  -152.7473   143.7372   110.9686 


Dimension: 3x6
Numbers' range: [-10, 10]
Average: -0.5000

 -9  -3   2   6  -3  -4 
  0   8  10 -10  -7   6 
 -2   3   1   1  -6  -2 


Square matrix
Dimension: 5x5
Numbers' range: [2, 98]
Average: 52.1600

56  2 26 74 31 
 4 44 95 97 63 
31 43 19 54 87 
14 50 98 55 62 
54 92 50 82 21 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-6.5421, 8.3118]
Average: -0.3006

-6.5421  0.5741  0.3859  5.1341 
 3.6902 -6.0360  0.5918  4.3985 
-3.1494  8.3118 -0.0995 -0.4609 
-1.4265 -2.4999 -1.2404 -6.4413 

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: [-52, 88]
Average: 19.1667

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: [-5, 352]
Average: 86.4000

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: [5, 659]
Average: 185.5000

 34   5  44 659 


Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-6.3509, 5.4201]
Average: -0.1061

-5.3502 -0.1642  0.9718 
-0.2532  1.9576 -0.3076 
 3.2298  5.4201  2.0875 
-6.3509 -1.8916 -0.6217 

d.matrix:

[[-5.3502, -0.1642, 0.9718], [-0.2532, 1.9576, -0.3076], [3.2298, 5.4201, 2.0875], [-6.3509, -1.8916, -0.6217]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-457.8657, 792.2484]
Average: 124.2980

 200.1096  527.6148 
-457.8657    5.9316 
   8.3558    3.2319 
 792.2484  -85.2421 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1154.1563, 1013.5677]
Average: 97.9115

  468.0170   200.1096   527.6148   116.3625  1013.5677   -79.1416 
 -226.5926  -457.8657     5.9316   925.8804   -56.7368  -572.9785 
   -6.0977     8.3558     3.2319    15.9165  -441.9383   418.7598 
    4.0847   792.2484   -85.2421   186.0924 -1154.1563    28.5956 
 -177.1163   211.4958   597.4090   390.7108   218.2238    69.0748 
  491.6937   138.4956  -151.1502  -152.7473   143.7372   110.9686 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1154.1563, 1013.5677]
Average: 97.9115

  468.0170   200.1096   527.6148   116.3625  1013.5677   -79.1416 
 -226.5926  -457.8657     5.9316   925.8804   -56.7368  -572.9785 
   -6.0977     8.3558     3.2319    15.9165  -441.9383   418.7598 
    4.0847   792.2484   -85.2421   186.0924 -1154.1563    28.5956 
 -177.1163   211.4958   597.4090   390.7108   218.2238    69.0748 
  491.6937   138.4956  -151.1502  -152.7473   143.7372   110.9686 

################
proj.dim:
 [20, 20]
################
validStr2.inRange:
 [-5, 352]
################
g: 
Dimension: 3x6
Numbers' range: [-10, 10]
Average: -0.5000

 -9  -3   2   6  -3  -4 
  0   8  10 -10  -7   6 
 -2   3   1   1  -6  -2 

################
g.remove(3):

Dimension: 2x6
Numbers' range: [-10, 10]
Average: -0.3333

 -9  -3   2   6  -3  -4 
  0   8  10 -10  -7   6 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: 51.5306

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: 51.53061224489796

h.det: 1287494735580

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-0.07446221620223706, 0.0709854244777385]
Average: -0.0004

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: 52.1111

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-10, 10]
Average: 0.5000

 -9  -3   2   6 
  0   8  10 -10 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-9, -3, 2, 6], [0, 8, 10, -10]],inRange=[-10, 10],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: 46.9067

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [2, 98]
Average: 52.1600

56  2 26 74 31 
 4 44 95 97 63 
31 43 19 54 87 
14 50 98 55 62 
54 92 50 82 21 

p.det:
 -1684330464

p.adj:
 
Square matrix
Dimension: 5x5
Numbers' range: [-31113960, 34513098]
Average: -1446873.6000

-24523545  34513098   2955126 -25831758  -3315345 
 20410457   1598550  -6637910   3731246 -18441519 
 -6356642   9025044  15744332 -29632220   4567566 
 -3428796 -31113960   1390248  32520408  -3368796 
  2166798   4253268 -21433620  -6353436  11389566 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-0.020490692733798346, 0.01847259826086005]
Average: 0.0009

 0.0146 -0.0205 -0.0018  0.0153  0.0020 
-0.0121 -0.0009  0.0039 -0.0022  0.0109 
 0.0038 -0.0054 -0.0093  0.0176 -0.0027 
 0.0020  0.0185 -0.0008 -0.0193  0.0020 
-0.0013 -0.0025  0.0127  0.0038 -0.0068 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [2, 98]
Average: 52.1600

56  2 26 74 31 
 4 44 95 97 63 
31 43 19 54 87 
14 50 98 55 62 
54 92 50 82 21 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [2, 98]
Average: 52.8750

 2 26 74 31 
43 19 54 87 
50 98 55 62 
92 50 82 21 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [2, 98]
Average: 53.3000

 2 55 26 74 31 
43 55 19 54 87 
50 55 98 55 62 
92 55 50 82 21 

################

r: 
Dimension: 5x4
Numbers' range: [2, 98]
Average: 53.3000

 2 43 50 92 
55 55 55 55 
26 19 98 50 
74 54 55 82 
31 87 62 21 

p==r.t:

Same dimension
Same average
All the elements and their positions are same!
True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-126.9572, -11.7989]
Average: -44.6851

 -29.0087  -27.3398  -11.7989 
-126.9572  -51.0637  -21.9421 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.25540291727520525, 1.5895930792903528]
Average: 0.8480

1.4842 1.5896 0.2554 
0.5027 0.4369 0.8194 

################

r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [2, 98]
Average: 52.8750

 2 43 50 92 
26 19 98 50 
74 54 55 82 
31 87 62 21 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [19, 98]
Average: 53.2500

26 19 98 50 
26 19 98 50 
74 54 55 82 
31 87 62 21 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: 12.3750

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: 62.3750

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: 0.1250

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j
Division by zero! Can't get modular
None
################

a<b
Lower dimension!
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: 19.1667

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: [-5, 352]
Average: 86.4000

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: [5, 659]
Average: 185.5000

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

