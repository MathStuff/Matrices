# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
v=Matrix()
o=Matrix(dim=8,randomFill=0)
a=Matrix(0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(inRange=[0,0],rangeLock=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================

for matrix in [proj,v,o,a,b,validStr1,validStr2,validStr3,validStr4,c,d,e,f,g,p,q,k,l,m]:
    print(matrix)
    
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================

for i in [id1,id2,id3,id4]:
    print(i)
    
# =============================================================================
"""ATTRIBUTE CALL EXAMPLES"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)
print('\n################\n')
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print('################')
print("proj.dim:\n",proj.dim)
print('################')
print("validStr2.inRange:\n",validStr2.inRange)
print('################')
print("g:",g)
print('################')
print("g.remove(3):")
g.remove(3)
print(g)
print('################')
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)
print('\n################')
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)
print('################')
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)
print('################')
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)
print("################")
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)
print('\n################')
print("id3:\n")
print(id3)
print('################')
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))
print('################')
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================
print("################################")
print("Operator examples")
print("################")
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))
print("################\n")
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    
print("################")
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)
print("################")
print("\nc%j")
print(c%j)
print("################")
print("\na<b")
print(a<b)
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""

Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: 47.2250

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67  4 

Invalid matrix


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 

Invalid matrix


Square matrix
Dimension: 1x1
Numbers' range: [1, 1]
Average: 1.0000

1 


Dimension: 2x3
Numbers' range: [-52, 88]
Average: 18.1667

 34 -52  33 
  9  88  -3 


Dimension: 1x10
Numbers' range: [-5, 352]
Average: 86.4000

312  45  12  44 352  45  12  44   3  -5 


Dimension: 4x1
Numbers' range: [5, 65]
Average: 37.0000

34 
 5 
44 
65 


Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 


Dimension: 2x4
Numbers' range: [-9, 10]
Average: 1.7500

 4  5  4  2 
-5  3 -9 10 


Float Matrix
Dimension: 4x3
Numbers' range: [-4.2957, 6.9558]
Average: 0.4923

 1.1255  0.7073  0.7312 
-0.2563 -0.3281  0.1431 
 6.9558 -4.2957  2.1534 
-3.4565 -0.6169  3.0444 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1003.5814, 965.6737]
Average: -12.4789

   34.0120  -109.4080   446.1965 -1003.5814   313.4066    -4.2768 
 -318.7991   -44.1641   109.5182  -217.4005   418.0442    35.0339 
  844.8513   302.1311  -811.5295  -669.7177   965.6737   258.5657 
  222.0032   233.3591   -57.9011    -5.8862  -561.9291   187.7468 
 -313.4201  -236.9747    -3.1559   -36.0903  -450.9040  -208.2337 
   28.2675    19.9551  -776.2223   319.0518   882.7440  -240.2066 


Dimension: 3x6
Numbers' range: [-10, 9]
Average: -0.4444

 -6  -9  -6   0 -10  -8 
  7   9   0  -9  -2   4 
  6   1   7  -3   8   3 


Square matrix
Dimension: 5x5
Numbers' range: [0, 100]
Average: 51.0400

  3   9  67  34  81 
  3 100  31  78  84 
 78  90  97   6  70 
 81  77   7  81  22 
 49  34  60  34   0 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-9.0852, 5.2068]
Average: -0.3356

 3.8176  3.4018 -1.1954  1.0168 
 4.5164  1.2775 -9.0852 -0.7248 
-4.2039 -7.2613  3.4193  1.7819 
 2.4216  5.2068 -1.9589 -7.8005 

Invalid matrix

Invalid matrix

Invalid matrix


Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Square matrix
Dimension: 3x3
Numbers' range: [0, 1]
Average: 0.3333

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-4.2957, 6.9558]
Average: 0.4923

 1.1255  0.7073  0.7312 
-0.2563 -0.3281  0.1431 
 6.9558 -4.2957  2.1534 
-3.4565 -0.6169  3.0444 

d.matrix:

[[1.1255, 0.7073, 0.7312], [-0.2563, -0.3281, 0.1431], [6.9558, -4.2957, 2.1534], [-3.4565, -0.6169, 3.0444]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-811.5295, 446.1965]
Average: 8.5253

-109.4080  446.1965 
 -44.1641  109.5182 
 302.1311 -811.5295 
 233.3591  -57.9011 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1003.5814, 965.6737]
Average: -12.4789

   34.0120  -109.4080   446.1965 -1003.5814   313.4066    -4.2768 
 -318.7991   -44.1641   109.5182  -217.4005   418.0442    35.0339 
  844.8513   302.1311  -811.5295  -669.7177   965.6737   258.5657 
  222.0032   233.3591   -57.9011    -5.8862  -561.9291   187.7468 
 -313.4201  -236.9747    -3.1559   -36.0903  -450.9040  -208.2337 
   28.2675    19.9551  -776.2223   319.0518   882.7440  -240.2066 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1003.5814, 965.6737]
Average: -12.4789

   34.0120  -109.4080   446.1965 -1003.5814   313.4066    -4.2768 
 -318.7991   -44.1641   109.5182  -217.4005   418.0442    35.0339 
  844.8513   302.1311  -811.5295  -669.7177   965.6737   258.5657 
  222.0032   233.3591   -57.9011    -5.8862  -561.9291   187.7468 
 -313.4201  -236.9747    -3.1559   -36.0903  -450.9040  -208.2337 
   28.2675    19.9551  -776.2223   319.0518   882.7440  -240.2066 

################
proj.dim:
 [20, 20]
################
validStr2.inRange:
 [-5, 352]
################
g: 
Dimension: 3x6
Numbers' range: [-10, 9]
Average: -0.4444

 -6  -9  -6   0 -10  -8 
  7   9   0  -9  -2   4 
  6   1   7  -3   8   3 

################
g.remove(3):

Dimension: 2x6
Numbers' range: [-10, 9]
Average: -2.5000

 -6  -9  -6   0 -10  -8 
  7   9   0  -9  -2   4 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: 51.5306

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: 51.53061224489796

h.det: 1287494735580

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-0.07446221620223706, 0.0709854244777385]
Average: -0.0004

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: 52.1111

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-9, 9]
Average: -1.7500

-6 -9 -6  0 
 7  9  0 -9 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-6, -9, -6, 0], [7, 9, 0, -9]],inRange=[-9, 9],rangeLock=0,randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: 46.9067

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [0, 100]
Average: 51.0400

  3   9  67  34  81 
  3 100  31  78  84 
 78  90  97   6  70 
 81  77   7  81  22 
 49  34  60  34   0 

p.det:
 3385018232

p.adj:
 
Square matrix
Dimension: 5x5
Numbers' range: [-60561027, 56943006]
Average: 2835877.0000

 15369664 -40707040  17318288  43734928 -29231128 
-45975222  36274857  16134689 -20569238   8912319 
  3147780   7597826  -2593430 -32347612  56943006 
 18269918   8983243 -36516757  14623510  32286597 
 36056886 -12578237  15039043  21284062 -60561027 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-0.017890901274176654, 0.01682206774004755]
Average: 0.0008

 0.0045 -0.0120  0.0051  0.0129 -0.0086 
-0.0136  0.0107  0.0048 -0.0061  0.0026 
 0.0009  0.0022 -0.0008 -0.0096  0.0168 
 0.0054  0.0027 -0.0108  0.0043  0.0095 
 0.0107 -0.0037  0.0044  0.0063 -0.0179 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [0, 100]
Average: 51.0400

  3   9  67  34  81 
  3 100  31  78  84 
 78  90  97   6  70 
 81  77   7  81  22 
 49  34  60  34   0 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [0, 97]
Average: 48.0625

 9 67 34 81 
90 97  6 70 
77  7 81 22 
34 60 34  0 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [0, 97]
Average: 49.4500

 9 55 67 34 81 
90 55 97  6 70 
77 55  7 81 22 
34 55 60 34  0 

################

r: 
Dimension: 5x4
Numbers' range: [0, 97]
Average: 49.4500

 9 90 77 34 
55 55 55 55 
67 97  7 60 
34  6 81 34 
81 70 22  0 

p==r.t:

Same dimension
Same average
All the elements and their positions are same!
True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Square matrix
Dimension: 3x3
Numbers' range: [0, 1]
Average: 0.3333

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-103.5636, 27.971499999999995]
Average: -7.0850

  24.1307  -17.2279   18.3427 
-103.5636   27.9715    7.8367 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.1394080761820078, 1.9032996003516018]
Average: 1.1610

1.6502 0.1394 1.0403 
0.4383 1.9033 1.7946 

################

r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [0, 97]
Average: 48.0625

 9 90 77 34 
67 97  7 60 
34  6 81 34 
81 70 22  0 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [0, 97]
Average: 49.3750

67 97  7 60 
67 97  7 60 
34  6 81 34 
81 70 22  0 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: 12.3750

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: 62.3750

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: 0.1250

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j
Division by zero! Can't get modular
None
################

a<b
Lower dimension!
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: 18.1667

 34 -52  33 
  9  88  -3 

################
validStr2:

Dimension: 1x10
Numbers' range: [-5, 352]
Average: 86.4000

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:

Dimension: 4x1
Numbers' range: [5, 65]
Average: 37.0000

34 
 5 
44 
65 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

