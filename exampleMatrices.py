# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix
a=Matrix(0)
v=Matrix()
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q,v,a,k,l,m]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.echelon.p")
f.echelon.p
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange:\n",g.inRange)
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\na<b")
print(a<b)

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: 47.3350

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: [1, 1]
Average: 1.0000

1 


Dimension: 2x4
Numbers' range: [-7, 5]
Average: -1.2500

 2 -7 -6  0 
-3  5 -5  4 


Float Matrix
Dimension: 4x3
Numbers' range: [-9.567, 8.4093]
Average: 0.0667

-1.9008 -9.5670  1.3595 
 2.5261 -0.1303 -1.4159 
-4.7233 -0.2628  6.3371 
 8.4093  0.1683  0.0000 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-803.1215, 697.0319]
Average: -12.2093

-147.5323   57.7496  623.6857 -261.8769  -28.9872 -326.7177 
-449.2519 -154.4721   -0.7866 -123.9159  348.3241  204.2477 
  35.5748  293.1369  697.0319 -117.5487   31.2482 -335.7194 
   2.8495  246.5682 -803.1215  273.4370   -5.8676  111.7116 
 169.2316  -43.9452   12.3241 -193.3536  658.2634 -631.8057 
 181.9046   45.4177  -89.5899   60.8771 -271.5961 -507.0298 


Dimension: 3x6
Numbers' range: [-9, 10]
Average: 1.1111

-5 10 -4  0  8 -2 
 4 -8  9 -9 -2  9 
 1  9 10 -5 -7  2 


Square matrix
Dimension: 5x5
Numbers' range: [1, 98]
Average: 49.0400

81 34 70 59 40 
77 81  6  1 44 
41 48 64 98 60 
14 36 29 18 15 
82 31 48 80 69 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-9.3143, 5.5991]
Average: 0.0049

 0.0000  4.4869  0.4722  1.2781 
 5.5991 -1.2620 -6.3203 -6.9602 
 0.7683  0.0000  5.2206  1.9600 
-9.3143  3.2465 -1.8820  2.7862 

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: [-52, 88]
Average: 19.1667

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: [-5, 352]
Average: 86.4000

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: [5, 659]
Average: 185.5000

 34   5  44 659 


Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-9.567, 8.4093]
Average: 0.0667

-1.9008 -9.5670  1.3595 
 2.5261 -0.1303 -1.4159 
-4.7233 -0.2628  6.3371 
 8.4093  0.1683  0.0000 

d.matrix:

[[-1.9008, -9.567, 1.3595], [2.5261, -0.1303, -1.4159], [-4.7233, -0.2628, 6.3371], [8.4093, 0.1683, 0.0]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-803.1215, 697.0319]
Average: 119.9740

  57.7496  623.6857 
-154.4721   -0.7866 
 293.1369  697.0319 
 246.5682 -803.1215 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-803.1215, 697.0319]
Average: -12.2093

-147.5323   57.7496  623.6857 -261.8769  -28.9872 -326.7177 
-449.2519 -154.4721   -0.7866 -123.9159  348.3241  204.2477 
  35.5748  293.1369  697.0319 -117.5487   31.2482 -335.7194 
   2.8495  246.5682 -803.1215  273.4370   -5.8676  111.7116 
 169.2316  -43.9452   12.3241 -193.3536  658.2634 -631.8057 
 181.9046   45.4177  -89.5899   60.8771 -271.5961 -507.0298 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-803.1215, 697.0319]
Average: -12.2093

-147.5323   57.7496  623.6857 -261.8769  -28.9872 -326.7177 
-449.2519 -154.4721   -0.7866 -123.9159  348.3241  204.2477 
  35.5748  293.1369  697.0319 -117.5487   31.2482 -335.7194 
   2.8495  246.5682 -803.1215  273.4370   -5.8676  111.7116 
 169.2316  -43.9452   12.3241 -193.3536  658.2634 -631.8057 
 181.9046   45.4177  -89.5899   60.8771 -271.5961 -507.0298 

f.echelon.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-4.227, 5.755]
Average: 0.1993

 1.0000 -0.3910 -4.2270  1.7750  0.1960  2.2150 
 0.0000  1.0000  5.7550 -2.0400 -1.3220 -3.6330 
 0.0000  0.0000  1.0000 -0.4850 -0.4680 -0.7620 
 0.0000  0.0000  0.0000  1.0000  2.3770  2.2690 
 0.0000  0.0000  0.0000  0.0000  1.0000 -0.0850 
 0.0000  0.0000  0.0000  0.0000  0.0000  1.0000 

################
g.dim:
 [3, 6]
g.inRange:
 [-9, 10]
g: 
Dimension: 3x6
Numbers' range: [-9, 10]
Average: 1.1111

-5 10 -4  0  8 -2 
 4 -8  9 -9 -2  9 
 1  9 10 -5 -7  2 

g.remove(3):

Dimension: 2x6
Numbers' range: [-9, 10]
Average: 0.8333

-5 10 -4  0  8 -2 
 4 -8  9 -9 -2  9 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: 51.5306

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: 51.53061224489796

h.det: 1287494735580

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-0.07446221620223706, 0.0709854244777385]
Average: -0.0004

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: 52.1111

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-9, 10]
Average: -0.3750

-5 10 -4  0 
 4 -8  9 -9 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-5, 10, -4, 0], [4, -8, 9, -9]],inRange=[-9, 10],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: 46.9067

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [1, 98]
Average: 49.0400

81 34 70 59 40 
77 81  6  1 44 
41 48 64 98 60 
14 36 29 18 15 
82 31 48 80 69 

p.det:
 -98775697

p.adj:
 
Square matrix
Dimension: 5x5
Numbers' range: [-15335012, 11472422]
Average: -159759.6000

 -2664490  -1587988  -1739443   6033604   2758168 
  -924075  -1866387  -2940038   3150532   3597512 
  1003771   2693713   4494040  -9418749  -4159933 
 -2941633  -2419996  -6670035  11472422   6554506 
  6293973   3657601   7995136 -15335012 -11031189 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-0.11614620142847486, 0.15525086094811358]
Average: 0.0016

 0.0270  0.0161  0.0176 -0.0611 -0.0279 
 0.0094  0.0189  0.0298 -0.0319 -0.0364 
-0.0102 -0.0273 -0.0455  0.0954  0.0421 
 0.0298  0.0245  0.0675 -0.1161 -0.0664 
-0.0637 -0.0370 -0.0809  0.1553  0.1117 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [1, 98]
Average: 49.0400

81 34 70 59 40 
77 81  6  1 44 
41 48 64 98 60 
14 36 29 18 15 
82 31 48 80 69 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [15, 98]
Average: 49.9375

34 70 59 40 
48 64 98 60 
36 29 18 15 
31 48 80 69 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [15, 98]
Average: 50.9500

34 55 70 59 40 
48 55 64 98 60 
36 55 29 18 15 
31 55 48 80 69 

################

r: 
Dimension: 5x4
Numbers' range: [15, 98]
Average: 50.9500

34 48 36 31 
55 55 55 55 
70 64 29 48 
59 98 18 80 
40 60 15 69 

p==r.t:

Same dimension
Same average
All the elements and their positions are same!
True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-42.8435, 75.5866]
Average: 4.5996

  6.8555 -16.6451 -25.3923 
 75.5866  30.0367 -42.8435 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.6615848019719124, 1.5146003181580454]
Average: 0.9955

0.9616 1.5146 1.1094 
0.6616 0.7789 0.9469 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-803.1215, 697.0319]
Average: -12.2093

-147.5323   57.7496  623.6857 -261.8769  -28.9872 -326.7177 
-449.2519 -154.4721   -0.7866 -123.9159  348.3241  204.2477 
  35.5748  293.1369  697.0319 -117.5487   31.2482 -335.7194 
   2.8495  246.5682 -803.1215  273.4370   -5.8676  111.7116 
 169.2316  -43.9452   12.3241 -193.3536  658.2634 -631.8057 
 181.9046   45.4177  -89.5899   60.8771 -271.5961 -507.0298 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: [-803, 697]
Average: -12.1389

-147   57  623 -261  -28 -326 
-449 -154    0 -123  348  204 
  35  293  697 -117   31 -335 
   2  246 -803  273   -5  111 
 169  -43   12 -193  658 -631 
 181   45  -89   60 -271 -507 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-803.12, 697.03]
Average: -12.2100

-147.5300   57.7500  623.6900 -261.8800  -28.9900 -326.7200 
-449.2500 -154.4700   -0.7900 -123.9200  348.3200  204.2500 
  35.5700  293.1400  697.0300 -117.5500   31.2500 -335.7200 
   2.8500  246.5700 -803.1200  273.4400   -5.8700  111.7100 
 169.2300  -43.9500   12.3200 -193.3500  658.2600 -631.8100 
 181.9000   45.4200  -89.5900   60.8800 -271.6000 -507.0300 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-0.9899999999999984, 0.9000000000000057]
Average: -0.0711

-0.5300  0.7500  0.6900 -0.8800 -0.9900 -0.7200 
-0.2500 -0.4700 -0.7900 -0.9200  0.3200  0.2500 
 0.5700  0.1400  0.0300 -0.5500  0.2500 -0.7200 
 0.8500  0.5700 -0.1200  0.4400 -0.8700  0.7100 
 0.2300 -0.9500  0.3200 -0.3500  0.2600 -0.8100 
 0.9000  0.4200 -0.5900  0.8800 -0.6000 -0.0300 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [15, 98]
Average: 49.9375

34 48 36 31 
70 64 29 48 
59 98 18 80 
40 60 15 69 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [15, 98]
Average: 53.8125

70 64 29 48 
70 64 29 48 
59 98 18 80 
40 60 15 69 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: 12.3750

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: 62.3750

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: 0.1250

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j
Division by zero! Can't get modular
None
################

a<b
Lower dimension!
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: 19.1667

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: [-5, 352]
Average: 86.4000

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: [5, 659]
Average: 185.5000

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

