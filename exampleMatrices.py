# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
v=Matrix()
o=Matrix(dim=8,randomFill=0)
a=Matrix(0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(inRange=[0,0],rangeLock=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================

for matrix in [proj,v,o,a,b,validStr1,validStr2,validStr3,validStr4,c,d,e,f,g,p,q,k,l,m]:
    print(matrix)
    
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================

for i in [id1,id2,id3,id4]:
    print(i)
    
# =============================================================================
"""ATTRIBUTE CALL EXAMPLES"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)
print('\n################\n')
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print('################')
print("proj.dim:\n",proj.dim)
print('################')
print("validStr2.inRange:\n",validStr2.inRange)
print('################')
print("g:",g)
print('################')
print("g.remove(3):")
g.remove(3)
print(g)
print('################')
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)
print('\n################')
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)
print('################')
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)
print('################')
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)
print("################")
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)
print('\n################')
print("id3:\n")
print(id3)
print('################')
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))
print('################')
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================
print("################################")
print("Operator examples")
print("################")
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))
print("################\n")
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    
print("################")
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)): e[i][-i-1]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)
print("################")
print("\nc%j")
print(c%j)
print("################")
print("\na<b")
print(a<b)
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: 47.2250

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67  4 

Invalid matrix


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 

Invalid matrix


Square matrix
Dimension: 1x1
Numbers' range: [83, 83]
Average: 83.0000

83 


Dimension: 2x3
Numbers' range: [-52, 88]
Average: 18.1667

 34 -52  33 
  9  88  -3 


Dimension: 1x10
Numbers' range: [-5, 352]
Average: 86.4000

312  45  12  44 352  45  12  44   3  -5 


Dimension: 4x1
Numbers' range: [5, 65]
Average: 37.0000

34 
 5 
44 
65 


Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 


Dimension: 2x4
Numbers' range: [-93, 77]
Average: 1.0000

-51 -71  77  54 
 59 -93  -2  35 


Float Matrix
Dimension: 4x3
Numbers' range: [-57.0334, 39.0967]
Average: -7.920183333333334

-38.5645 -57.0334 -8.6702 
  1.4875   3.2623 -1.0527 
-16.7146 -49.3461   7.1497 
-13.5338  38.8769  39.0967 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: 0.0000

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1087.4008, 1059.3895]
Average: 68.76500555555558

   94.4219   476.1081  1007.4169   117.9178   670.3705   313.3418 
  394.6556 -321.6522    15.0369   478.8776  -21.7740    90.5880 
  268.7631   177.7839    29.1089     2.7765  1059.3895 -320.1419 
-670.3346   465.2387 -542.8014 -266.0634   716.2677 -139.7905 
 -28.0352   255.1432   243.0706 -499.3701    41.5354 -1087.4008 
  162.7556    44.3365  -84.9760   330.0918 -492.6446 -504.4716 


Dimension: 3x6
Numbers' range: [-115, 121]
Average: 14.2778

 -95  101   85   62  -85  116 
 -62  -35   31  119   56  -25 
 121 -115   10   38   29  -94 


Square matrix
Dimension: 5x5
Numbers' range: [2, 99]
Average: 56.2000

47 61 36 91 81 
58 12 18  2 14 
27 40 87 94 82 
47 75 44  7 48 
89 87 98 61 99 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-104.5638, 84.1888]
Average: -12.075793750000003

-83.4646 -104.5638  -1.6782 -58.1467 
-41.7773 -24.8634 -47.2123 -51.9035 
  42.1228   29.4988   33.8270   33.0634 
  84.1888 -31.1949   32.1893  -3.2981 

Invalid matrix

Invalid matrix

Invalid matrix


Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Square matrix
Dimension: 3x3
Numbers' range: [0, 1]
Average: 0.3333

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-57.0334, 39.0967]
Average: -7.920183333333334

-38.5645 -57.0334 -8.6702 
  1.4875   3.2623 -1.0527 
-16.7146 -49.3461   7.1497 
-13.5338  38.8769  39.0967 

d.matrix:

[[-38.5645, -57.0334, -8.6702], [1.4875, 3.2623, -1.0527], [-16.7146, -49.3461, 7.1497], [-13.5338, 38.8769, 39.0967]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-542.8014, 1007.4169]
Average: 163.27997500000004

 476.1081 1007.4169 
-321.6522   15.0369 
 177.7839   29.1089 
 465.2387 -542.8014 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1087.4008, 1059.3895]
Average: 68.76500555555558

   94.4219   476.1081  1007.4169   117.9178   670.3705   313.3418 
  394.6556 -321.6522    15.0369   478.8776  -21.7740    90.5880 
  268.7631   177.7839    29.1089     2.7765  1059.3895 -320.1419 
-670.3346   465.2387 -542.8014 -266.0634   716.2677 -139.7905 
 -28.0352   255.1432   243.0706 -499.3701    41.5354 -1087.4008 
  162.7556    44.3365  -84.9760   330.0918 -492.6446 -504.4716 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-1087.4008, 1059.3895]
Average: 68.76500555555558

   94.4219   476.1081  1007.4169   117.9178   670.3705   313.3418 
  394.6556 -321.6522    15.0369   478.8776  -21.7740    90.5880 
  268.7631   177.7839    29.1089     2.7765  1059.3895 -320.1419 
-670.3346   465.2387 -542.8014 -266.0634   716.2677 -139.7905 
 -28.0352   255.1432   243.0706 -499.3701    41.5354 -1087.4008 
  162.7556    44.3365  -84.9760   330.0918 -492.6446 -504.4716 

################
proj.dim:
 [20, 20]
################
validStr2.inRange:
 [-5, 352]
################
g: 
Dimension: 3x6
Numbers' range: [-115, 121]
Average: 14.2778

 -95  101   85   62  -85  116 
 -62  -35   31  119   56  -25 
 121 -115   10   38   29  -94 

################
g.remove(3):

Dimension: 2x6
Numbers' range: [-95, 119]
Average: 22.3333

-95 101  85  62 -85 116 
-62 -35  31 119  56 -25 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: 51.5306

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: 51.53061224489796

h.det: 1287494735580

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-0.07446221620223706, 0.0709854244777385]
Average: -0.0004215300099138443

 0.0011  0.0229  -0.0279  -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268  -0.0174  -0.0279  0.0197  0.0212  -0.0029 
 0.0048  -0.0282  0.0340  0.0407  -0.0241  -0.0400  -0.0096 
 0.0028  -0.0406  0.0363  0.0380  -0.0121  -0.0393  -0.0074 
 0.0398  -0.0745  0.0710  0.0630  -0.0317  -0.0622  -0.0487 
 0.0017  -0.0272  0.0178  0.0197  0.0007  -0.0011  -0.0167 
 -0.0195  0.0605  -0.0501  -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: 52.1111

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-95, 119]
Average: 25.7500

-95 101  85  62 
-62 -35  31 119 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-95, 101, 85, 62], [-62, -35, 31, 119]],inRange=[-95, 119],rangeLock=0,randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: 46.9067

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [2, 99]
Average: 56.2000

47 61 36 91 81 
58 12 18  2 14 
27 40 87 94 82 
47 75 44  7 48 
89 87 98 61 99 

p.det:
 123260676

p.adj:
 
Square matrix
Dimension: 5x5
Numbers' range: [-15880772, 20925164]
Average: 266783.0400

   339126   3415848    550260    674312  -1543226 
   361326   4403826   4788672   8586760  -9048046 
 -2209110   3043764   4486656   3725816  -4145654 
   927036   6510174   6356460   6557452 -10123432 
   993192 -13965180 -13060848 -15880772  20925164 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-0.12883891696326571, 0.1697635018649419]
Average: 0.00216438079570487

 0.0028  0.0277  0.0045  0.0055  -0.0125 
 0.0029  0.0357  0.0388  0.0697  -0.0734 
 -0.0179  0.0247  0.0364  0.0302  -0.0336 
 0.0075  0.0528  0.0516  0.0532  -0.0821 
 0.0081  -0.1133  -0.1060  -0.1288  0.1698 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [2, 99]
Average: 56.2000

47 61 36 91 81 
58 12 18  2 14 
27 40 87 94 82 
47 75 44  7 48 
89 87 98 61 99 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [7, 99]
Average: 68.1875

61 36 91 81 
40 87 94 82 
75 44  7 48 
87 98 61 99 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [7, 99]
Average: 65.5500

61 55 36 91 81 
40 55 87 94 82 
75 55 44  7 48 
87 55 98 61 99 

################

r: 
Dimension: 5x4
Numbers' range: [7, 99]
Average: 65.5500

61 40 75 87 
55 55 55 55 
36 87 44 98 
91 94  7 61 
81 82 48 99 

p==r.t:

Same dimension
Same average
All the elements and their positions are same!
True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Square matrix
Dimension: 3x3
Numbers' range: [0, 1]
Average: 0.3333

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-2853.8968, 3178.6706]
Average: -20.60866666666675

-156.6724   976.7830  3178.6706 
-2853.8968 -2208.9808   940.4444 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.11946964880189626, 1.7208671569824219]
Average: 1.0090782652635728

 0.1195  0.6620 1.1683 
1.5412 1.7209  0.8427 

################

r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [7, 99]
Average: 68.1875

61 40 75 87 
36 87 44 98 
91 94  7 61 
81 82 48 99 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [7, 99]
Average: 68.3125

36 87 44 98 
36 87 44 98 
91 94  7 61 
81 82 48 99 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: 12.3750

 0  0  0  0  0  0  0 99 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
99  0  0  0  0  0  0  0 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: 62.3750

 50  50  50  50  50  50  50 149 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
149  50  50  50  50  50  50  50 

for i in range(len(e)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: 0.1250

0 0 0 0 0 0 0 1 
0 0 0 0 0 0 1 0 
0 0 0 0 0 1 0 0 
0 0 0 0 1 0 0 0 
0 0 0 1 0 0 0 0 
0 0 1 0 0 0 0 0 
0 1 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 

################

c%j

Dimension: 2x4
Numbers' range: [-51, 77]
Average: 18.5000

-51  30  77  54 
 -3 -23  29  35 

################

a<b
Lower dimension!
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: 18.1667

 34 -52  33 
  9  88  -3 

################
validStr2:

Dimension: 1x10
Numbers' range: [-5, 352]
Average: 86.4000

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:

Dimension: 4x1
Numbers' range: [5, 65]
Average: 37.0000

34 
 5 
44 
65 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: 84.7273

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

