# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix(dim=[4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,inRange=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,inRange=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix
a=Matrix(0)
v=Matrix()
k=Matrix(dim=-1)
l=Matrix(inRange=[0])
m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q,v,a,k,l,m]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.echelon.p")
f.echelon.p
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange:\n",g.inRange)
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1]")
r[0]=r[1]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\na<b")
print(a<b)

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: [0, 99]
Average: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: [-1, -1]
Average: {'Col 1': -1.0}

-1 


Dimension: 2x4
Numbers' range: [-5, 10]
Average: {'Col 1': 8.0, 'Col 2': 1.0, 'Col 3': -1.0, 'Col 4': 9.5}

10  3  3  9 
 6 -1 -5 10 


Float Matrix
Dimension: 4x3
Numbers' range: [-2.9842, 4.6801]
Average: {'Col 1': -1.295, 'Col 2': 2.3643, 'Col 3': 1.0155}

-2.1956  4.6801 -0.4274 
-2.9842  4.0874  2.7053 
 0.0000  0.6896 -0.1861 
 0.0000  0.0000  1.9701 


Square matrix
Dimension: 8x8
Numbers' range: [0, 0]
Average: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-747.784, 858.9738]
Average: {'Col 1': -338.1519, 'Col 2': -169.0486, 'Col 3': 166.5644, 'Col 4': 154.2533, 'Col 5': 199.4703, 'Col 6': 108.2036}

   0.7036  -47.0035  -12.1601  480.8543   24.8667 -163.1656 
-727.8704 -136.6966  -81.3214  515.8729  258.2294 -281.3782 
-509.8827 -339.8049  484.5687 -105.2058  293.9700  749.8163 
  55.7031 -464.3121  105.7346  -58.5855  557.8933 -519.7188 
-747.7840  -69.0715    7.6181 -339.0763  130.3009    4.6942 
 -99.7812   42.5970  494.9464  431.6603  -68.4383  858.9738 


Dimension: 3x6
Numbers' range: [-10, 9]
Average: {'Col 1': 0.6667, 'Col 2': 0.3333, 'Col 3': 0.0, 'Col 4': 2.3333, 'Col 5': -1.0, 'Col 6': 3.3333}

  0   4   7   1   3   6 
 -6   7  -8  -3   3   1 
  8 -10   1   9  -9   3 


Square matrix
Dimension: 5x5
Numbers' range: [0, 89]
Average: {'Col 1': 52.4, 'Col 2': 28.8, 'Col 3': 45.2, 'Col 4': 37.6, 'Col 5': 36.4}

41  3 13  7 30 
27 16 85 47  0 
24 42 19 84  6 
81 30 25 21 81 
89 53 84 29 65 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: [-7.0721, 2.3158]
Average: {'Col 1': -0.4558, 'Col 2': -2.52, 'Col 3': 0.1322, 'Col 4': -0.9276}

 0.3173 -2.5583 -4.4041 -0.5633 
 0.7161 -0.1065  1.8475 -1.0781 
-4.8295 -7.0721  2.3158 -2.7717 
 1.9730 -0.3431  0.7694  0.7027 

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

Invalid matrix

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: [-52, 88]
Average: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: [-5, 352]
Average: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: [5, 659]
Average: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: [9, 193]
Average: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

1 


Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: [-2.9842, 4.6801]
Average: {'Col 1': -1.295, 'Col 2': 2.3643, 'Col 3': 1.0155}

-2.1956  4.6801 -0.4274 
-2.9842  4.0874  2.7053 
 0.0000  0.6896 -0.1861 
 0.0000  0.0000  1.9701 

d.matrix:

[[-2.1956, 4.6801, -0.4274], [-2.9842, 4.0874, 2.7053], [0.0, 0.6896, -0.1861], [0.0, 0.0, 1.9701]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: [-464.3121, 484.5687]
Average: {'Col 1': -246.9543, 'Col 2': 124.2054}

 -47.0035  -12.1601 
-136.6966  -81.3214 
-339.8049  484.5687 
-464.3121  105.7346 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-747.784, 858.9738]
Average: {'Col 1': -338.1519, 'Col 2': -169.0486, 'Col 3': 166.5644, 'Col 4': 154.2533, 'Col 5': 199.4703, 'Col 6': 108.2036}

   0.7036  -47.0035  -12.1601  480.8543   24.8667 -163.1656 
-727.8704 -136.6966  -81.3214  515.8729  258.2294 -281.3782 
-509.8827 -339.8049  484.5687 -105.2058  293.9700  749.8163 
  55.7031 -464.3121  105.7346  -58.5855  557.8933 -519.7188 
-747.7840  -69.0715    7.6181 -339.0763  130.3009    4.6942 
 -99.7812   42.5970  494.9464  431.6603  -68.4383  858.9738 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-747.784, 858.9738]
Average: {'Col 1': -338.1519, 'Col 2': -169.0486, 'Col 3': 166.5644, 'Col 4': 154.2533, 'Col 5': 199.4703, 'Col 6': 108.2036}

   0.7036  -47.0035  -12.1601  480.8543   24.8667 -163.1656 
-727.8704 -136.6966  -81.3214  515.8729  258.2294 -281.3782 
-509.8827 -339.8049  484.5687 -105.2058  293.9700  749.8163 
  55.7031 -464.3121  105.7346  -58.5855  557.8933 -519.7188 
-747.7840  -69.0715    7.6181 -339.0763  130.3009    4.6942 
 -99.7812   42.5970  494.9464  431.6603  -68.4383  858.9738 

f.echelon.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-169075.3102, 497957.0493]
Average: {'Col 1': 0.1173, 'Col 2': -8134.7612, 'Col 3': -2011.3562, 'Col 4': 81950.2155, 'Col 5': 4374.2371, 'Col 6': -27994.2976}

      0.7036     -47.0035     -12.1601     480.8543      24.8667    -163.1656 
      0.0000  -48761.5635  -12660.8792  497957.0493   25982.6963 -169075.3102 
      0.0000       0.0000     604.9020   -2958.8110     -16.9642    1793.1318 
      0.0000       0.0000       0.0000   -3777.7995     330.9193     444.5607 
      0.0000       0.0000       0.0000       0.0000     -76.0957    -143.6915 
      0.0000       0.0000       0.0000       0.0000       0.0000    -821.3111 

################
g.dim:
 [3, 6]
g.inRange:
 [-10, 9]
g: 
Dimension: 3x6
Numbers' range: [-10, 9]
Average: {'Col 1': 0.6667, 'Col 2': 0.3333, 'Col 3': 0.0, 'Col 4': 2.3333, 'Col 5': -1.0, 'Col 6': 3.3333}

  0   4   7   1   3   6 
 -6   7  -8  -3   3   1 
  8 -10   1   9  -9   3 

g.remove(3):

Dimension: 2x6
Numbers' range: [-8, 7]
Average: {'Col 1': -3.0, 'Col 2': 5.5, 'Col 3': -0.5, 'Col 4': -1.0, 'Col 5': 3.0, 'Col 6': 3.5}

 0  4  7  1  3  6 
-6  7 -8 -3  3  1 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: [3, 99]
Average: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: <bound method Matrix.avg of [[96, 35, 31, 47, 55, 58, 88], [35, 71, 89, 7, 5, 44, 44], [5, 94, 47, 69, 28, 73, 92], [97, 35, 99, 16, 7, 97, 57], [57, 62, 20, 72, 3, 46, 33], [38, 25, 39, 11, 24, 94, 72], [72, 30, 23, 88, 34, 62, 99]]>

h.det: 1287482081136.7107

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: [-0.07446298599261741, 0.07098615870555626]
Average: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: [3, 99]
Average: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: [-8, 7]
Average: {'Col 1': -3.0, 'Col 2': 5.5, 'Col 3': -0.5, 'Col 4': -1.0}

 0  4  7  1 
-6  7 -8 -3 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[0, 4, 7, 1], [-6, 7, -8, -3]],inRange=[-8, 7],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: [0, 99]
Average: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: [0, 89]
Average: {'Col 1': 52.4, 'Col 2': 28.8, 'Col 3': 45.2, 'Col 4': 37.6, 'Col 5': 36.4}

41  3 13  7 30 
27 16 85 47  0 
24 42 19 84  6 
81 30 25 21 81 
89 53 84 29 65 

p.det:
 -176081947.85657483

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-14324570.4349, 11667972.5198]
Average: {'Col 1': 1052780.9656, 'Col 2': -206315.6969, 'Col 3': -170843.6481, 'Col 4': -713895.8054, 'Col 5': -122289.5522}

-14324570.4349   3773605.4466  -1739423.9888   8413079.2501  -3712085.7570 
  3859336.6438   4024469.0069  -1495337.9773   2834062.4344  -5174902.5294 
  3529982.8600  -2823263.4670   1588756.3793  -1719348.6231    366697.5092 
   531183.2395  -2178384.9176  -1364994.2139  -2688355.8986   3230963.1325 
 11667972.5198  -3828004.5535   2156781.5604 -10408916.1897   4677879.8838 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: [-0.06626444483283425, 0.08135172633692062]
Average: {'Col 1': -0.006, 'Col 2': 0.0012, 'Col 3': 0.001, 'Col 4': 0.0041, 'Col 5': 0.0007}

 0.0814 -0.0214  0.0099 -0.0478  0.0211 
-0.0219 -0.0229  0.0085 -0.0161  0.0294 
-0.0200  0.0160 -0.0090  0.0098 -0.0021 
-0.0030  0.0124  0.0078  0.0153 -0.0183 
-0.0663  0.0217 -0.0122  0.0591 -0.0266 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: [0, 89]
Average: {'Col 1': 52.4, 'Col 2': 28.8, 'Col 3': 45.2, 'Col 4': 37.6, 'Col 5': 36.4}

41  3 13  7 30 
27 16 85 47  0 
24 42 19 84  6 
81 30 25 21 81 
89 53 84 29 65 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: [3, 84]
Average: {'Col 1': 32.0, 'Col 2': 35.25, 'Col 3': 35.25, 'Col 4': 45.5}

 3 13  7 30 
42 19 84  6 
30 25 21 81 
53 84 29 65 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: [3, 84]
Average: {'Col 1': 32.0, 'Col 2': 55.0, 'Col 3': 35.25, 'Col 4': 35.25, 'Col 5': 45.5}

 3 55 13  7 30 
42 55 19 84  6 
30 55 25 21 81 
53 55 84 29 65 

################

r: 
Dimension: 5x4
Numbers' range: [3, 84]
Average: {'Col 1': 21.6, 'Col 2': 41.2, 'Col 3': 42.4, 'Col 4': 57.2}

 3 42 30 53 
55 55 55 55 
13 19 25 84 
 7 84 21 29 
30  6 81 65 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

1 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 1 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 0 1 0 0 
0 0 0 0 0 1 0 
0 0 0 0 0 0 1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

1 0 0 
0 1 0 
0 0 1 

################
id4:


Identity Matrix
Dimension: 6x6

1 0 0 0 0 0 
0 1 0 0 0 0 
0 0 1 0 0 0 
0 0 0 1 0 0 
0 0 0 0 1 0 
0 0 0 0 0 1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: [-30.9086, 61.132]
Average: {'Col 1': -20.549, 'Col 2': 40.8386, 'Col 3': 18.1882}

-30.9086  61.1320  21.0145 
-10.1894  20.5452  15.3618 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: [0.8650401444174349, 1.74089196883142]
Average: {'Col 1': 1.056, 'Col 2': 1.3468, 'Col 3': 1.1016}

1.1878 1.7409 1.3381 
0.9242 0.9528 0.8650 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-747.784, 858.9738]
Average: {'Col 1': -338.1519, 'Col 2': -169.0486, 'Col 3': 166.5644, 'Col 4': 154.2533, 'Col 5': 199.4703, 'Col 6': 108.2036}

   0.7036  -47.0035  -12.1601  480.8543   24.8667 -163.1656 
-727.8704 -136.6966  -81.3214  515.8729  258.2294 -281.3782 
-509.8827 -339.8049  484.5687 -105.2058  293.9700  749.8163 
  55.7031 -464.3121  105.7346  -58.5855  557.8933 -519.7188 
-747.7840  -69.0715    7.6181 -339.0763  130.3009    4.6942 
 -99.7812   42.5970  494.9464  431.6603  -68.4383  858.9738 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: [-747, 858]
Average: {'Col 1': -337.8333, 'Col 2': -168.8333, 'Col 3': 166.1667, 'Col 4': 154.0, 'Col 5': 199.0, 'Col 6': 108.0}

   0  -47  -12  480   24 -163 
-727 -136  -81  515  258 -281 
-509 -339  484 -105  293  749 
  55 -464  105  -58  557 -519 
-747  -69    7 -339  130    4 
 -99   42  494  431  -68  858 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-747.78, 858.97]
Average: {'Col 1': -338.1517, 'Col 2': -169.0467, 'Col 3': 166.565, 'Col 4': 154.25, 'Col 5': 199.47, 'Col 6': 108.2017}

   0.7000  -47.0000  -12.1600  480.8500   24.8700 -163.1700 
-727.8700 -136.7000  -81.3200  515.8700  258.2300 -281.3800 
-509.8800 -339.8000  484.5700 -105.2100  293.9700  749.8200 
  55.7000 -464.3100  105.7300  -58.5900  557.8900 -519.7200 
-747.7800  -69.0700    7.6200 -339.0800  130.3000    4.6900 
 -99.7800   42.6000  494.9500  431.6600  -68.4400  858.9700 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: [-0.8799999999999955, 0.9700000000000273]
Average: {'Col 1': -0.3183, 'Col 2': -0.2133, 'Col 3': 0.3983, 'Col 4': 0.25, 'Col 5': 0.47, 'Col 6': 0.2017}

 0.7000  0.0000 -0.1600  0.8500  0.8700 -0.1700 
-0.8700 -0.7000 -0.3200  0.8700  0.2300 -0.3800 
-0.8800 -0.8000  0.5700 -0.2100  0.9700  0.8200 
 0.7000 -0.3100  0.7300 -0.5900  0.8900 -0.7200 
-0.7800 -0.0700  0.6200 -0.0800  0.3000  0.6900 
-0.7800  0.6000  0.9500  0.6600 -0.4400  0.9700 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: [3, 84]
Average: {'Col 1': 13.25, 'Col 2': 37.75, 'Col 3': 39.25, 'Col 4': 57.75}

 3 42 30 53 
13 19 25 84 
 7 84 21 29 
30  6 81 65 

r.rank: 4

r[0]=r[1]

Square matrix
Dimension: 4x4
Numbers' range: [6, 84]
Average: {'Col 1': 15.75, 'Col 2': 32.0, 'Col 3': 38.0, 'Col 4': 65.5}

13 19 25 84 
13 19 25 84 
 7 84 21 29 
30  6 81 65 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: [0, 99]
Average: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: [50, 149]
Average: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: [0, 1]
Average: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j
Division by zero! Can't get modular
None
################

a<b
Invalid
None

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: [-52, 88]
Average: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: [-5, 352]
Average: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: [5, 659]
Average: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: [9, 193]
Average: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

