# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"])

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.variance()")
print(validStr4.variance())
print("")
# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Features: []

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Features: []

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Features: []

2 


Dimension: 2x4
Features: []

 13 -12 -19 -14 
 50  16   0 -19 


Float Matrix
Dimension: 4x3
Features: []

 0.1553  2.2267 -0.3526 
-2.6484 -0.4628 -0.5600 
-3.5930  0.5811  1.6159 
 2.2206  0.0115 -4.9052 


Square matrix
Dimension: 8x8
Features: []

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1164.5202  -482.6669  -520.2004   -37.6263 -1215.6688  -887.6435 
 1010.9814   615.8959  -226.7578 -1146.7577  -720.8502   821.2391 
  821.6258 -1047.1302 -1047.1810  -974.4912   311.4470  -433.5970 
 -733.9181  -411.2454  1040.4701  -933.5050  -819.6283  -911.3596 
  769.8131  -692.4702  -430.5589  -588.1983  1073.6046  -675.1073 
  692.2820  1177.1508   758.7696 -1216.2331  -998.0427   564.6450 


Dimension: 3x6
Features: []

 3  5  6  3  6  2 
 7 10  2 10  2  5 
 7  5  6  9  5  4 


Square matrix
Dimension: 5x5
Features: []

13 51 81 51 67 
22 34 23 28 55 
12 43  8 16 62 
82 32 70 34 31 
41 41 36 19 77 


Float Matrix
Square matrix
Dimension: 4x4
Features: []

 4.1536 -3.3677 -1.8749  2.2236 
-1.5966 -3.1485 -1.7195  2.1209 
-1.7301 -4.5115 -2.2625  2.9412 
 3.6925 -3.8108 -1.2049  3.5768 


Square matrix
Dimension: 3x3
Features: []

3 5 7 
8 3 4 
5 2 5 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Features: []

 34 -52  33 
  9  88  -3 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: []

312  45  12  44 352  45  12  44   3  -5 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: []

 34   5  44 659 


Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Features: []

 0.1553  2.2267 -0.3526 
-2.6484 -0.4628 -0.5600 
-3.5930  0.5811  1.6159 
 2.2206  0.0115 -4.9052 

d.matrix:

[[0.1553, 2.2267, -0.3526], [-2.6484, -0.4628, -0.56], [-3.593, 0.5811, 1.6159], [2.2206, 0.0115, -4.9052]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Features: []

 -482.6669  -520.2004 
  615.8959  -226.7578 
-1047.1302 -1047.1810 
 -411.2454  1040.4701 
 


Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1164.5202  -482.6669  -520.2004   -37.6263 -1215.6688  -887.6435 
 1010.9814   615.8959  -226.7578 -1146.7577  -720.8502   821.2391 
  821.6258 -1047.1302 -1047.1810  -974.4912   311.4470  -433.5970 
 -733.9181  -411.2454  1040.4701  -933.5050  -819.6283  -911.3596 
  769.8131  -692.4702  -430.5589  -588.1983  1073.6046  -675.1073 
  692.2820  1177.1508   758.7696 -1216.2331  -998.0427   564.6450 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1164.5202  -482.6669  -520.2004   -37.6263 -1215.6688  -887.6435 
 1010.9814   615.8959  -226.7578 -1146.7577  -720.8502   821.2391 
  821.6258 -1047.1302 -1047.1810  -974.4912   311.4470  -433.5970 
 -733.9181  -411.2454  1040.4701  -933.5050  -819.6283  -911.3596 
  769.8131  -692.4702  -430.5589  -588.1983  1073.6046  -675.1073 
  692.2820  1177.1508   758.7696 -1216.2331  -998.0427   564.6450 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 -1164.5202   -482.6669   -520.2004    -37.6263  -1215.6688   -887.6435 
     0.0000    196.8673   -678.3712  -1179.4231  -1776.2364     50.6290 
     0.0000      0.0000  -6195.9002  -9314.5375 -13066.5742   -703.0001 
     0.0000      0.0000      0.0000  -3053.6246  -3127.0673   -437.8044 
     0.0000      0.0000      0.0000      0.0000    402.7218   -479.8452 
     0.0000      0.0000      0.0000      0.0000      0.0000   -282.4446 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: []

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
-0.8682 1.0000 0.0000 0.0000 0.0000 0.0000 
-0.7055 -7.0488 1.0000 0.0000 0.0000 0.0000 
0.6302 -0.5438 -0.1613 1.0000 0.0000 0.0000 
-0.6611 -5.1382 0.6876 0.0881 1.0000 0.0000 
-0.5945 4.5219 -0.5676 0.3906 0.2867 1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [3, 7], 'Col 2': [5, 10], 'Col 3': [2, 6], 'Col 4': [3, 10], 'Col 5': [2, 6], 'Col 6': [2, 5]}
g: 
Dimension: 3x6
Features: []

 3  5  6  3  6  2 
 7 10  2 10  2  5 
 7  5  6  9  5  4 

g.remove(3):

Dimension: 2x6
Features: []

 3  5  6  3  6  2 
 7 10  2 10  2  5 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Features: []

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 1': 57.142857142857146, 'Col 2': 50.285714285714285, 'Col 3': 49.714285714285715, 'Col 4': 44.285714285714285, 'Col 5': 22.285714285714285, 'Col 6': 67.71428571428571, 'Col 7': 69.28571428571429}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Features: []

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Features: []

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Features: []

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Features: []

 3  5  6  3 
 7 10  2 10 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[3, 5, 6, 3], [7, 10, 2, 10]],ranged=[-5, 5],randomFill=1,features=[],header=None,directory='')

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Features: []

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Features: []

13 51 81 51 67 
22 34 23 28 55 
12 43  8 16 62 
82 32 70 34 31 
41 41 36 19 77 

p.det:
 -62923345.99999995

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Features: []

  814985.0000  -670669.0000   156574.0000  -702963.0000   -73155.0000 
 -438020.0000  3879596.0000 -5270598.0000 -1411096.0000  2421956.0000 
-1012262.0000  2332932.0000   396012.0000    36112.0000 -1118986.0000 
  364217.0000 -5528401.0000  1875636.0000   112883.0000  2076243.0000 
  182672.0000 -1435220.0000  2075084.0000  1080930.0000 -2057004.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Features: []

-0.0130  0.0107 -0.0025  0.0112  0.0012 
 0.0070 -0.0617  0.0838  0.0224 -0.0385 
 0.0161 -0.0371 -0.0063 -0.0006  0.0178 
-0.0058  0.0879 -0.0298 -0.0018 -0.0330 
-0.0029  0.0228 -0.0330 -0.0172  0.0327 

################
p:

Square matrix
Dimension: 5x5
Features: []

13 51 81 51 67 
22 34 23 28 55 
12 43  8 16 62 
82 32 70 34 31 
41 41 36 19 77 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Features: []

51 81 51 67 
43  8 16 62 
32 70 34 31 
41 36 19 77 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Features: []

51 55 81 51 67 
43 55  8 16 62 
32 55 70 34 31 
41 55 36 19 77 

p.sdev()
{'Col 1': 7.804912982645397, 'Col 2': 0.0, 'Col 3': 33.240286801811244, 'Col 4': 16.06237840420901, 'Col 5': 19.83893478323202}
################

r: 
Dimension: 5x4
Features: []

51 43 32 41 
55 55 55 55 
81  8 70 36 
51 16 34 19 
67 62 31 77 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

 1  0  0  0  0  0  0 
 0  1  0  0  0  0  0 
 0  0  1  0  0  0  0 
 0  0  0  1  0  0  0 
 0  0  0  0  1  0  0 
 0  0  0  0  0  1  0 
 0  0  0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

 1  0  0  0  0  0  0  0  0  0 
 0  1  0  0  0  0  0  0  0  0 
 0  0  1  0  0  0  0  0  0  0 
 0  0  0  1  0  0  0  0  0  0 
 0  0  0  0  1  0  0  0  0  0 
 0  0  0  0  0  1  0  0  0  0 
 0  0  0  0  0  0  1  0  0  0 
 0  0  0  0  0  0  0  1  0  0 
 0  0  0  0  0  0  0  0  1  0 
 0  0  0  0  0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Features: []

 70.9783  23.2988  40.1069 
-76.8008 103.7117  66.6088 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Features: []

1.3953 0.4132 1.7154 
0.5923 1.8564 0.4993 

################

f:
 
Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1164.5202  -482.6669  -520.2004   -37.6263 -1215.6688  -887.6435 
 1010.9814   615.8959  -226.7578 -1146.7577  -720.8502   821.2391 
  821.6258 -1047.1302 -1047.1810  -974.4912   311.4470  -433.5970 
 -733.9181  -411.2454  1040.4701  -933.5050  -819.6283  -911.3596 
  769.8131  -692.4702  -430.5589  -588.1983  1073.6046  -675.1073 
  692.2820  1177.1508   758.7696 -1216.2331  -998.0427   564.6450 

f1=f.intForm

Square matrix
Dimension: 6x6
Features: []

-1164  -482  -520   -37 -1215  -887 
 1010   615  -226 -1146  -720   821 
  821 -1047 -1047  -974   311  -433 
 -733  -411  1040  -933  -819  -911 
  769  -692  -430  -588  1073  -675 
  692  1177   758 -1216  -998   564 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1164.5200  -482.6700  -520.2000   -37.6300 -1215.6700  -887.6400 
 1010.9800   615.9000  -226.7600 -1146.7600  -720.8500   821.2400 
  821.6300 -1047.1300 -1047.1800  -974.4900   311.4500  -433.6000 
 -733.9200  -411.2500  1040.4700  -933.5000  -819.6300  -911.3600 
  769.8100  -692.4700  -430.5600  -588.2000  1073.6000  -675.1100 
  692.2800  1177.1500   758.7700 -1216.2300  -998.0400   564.6400 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-0.5200 -0.6700 -0.2000 -0.6300 -0.6700 -0.6400 
 0.9800  0.9000 -0.7600 -0.7600 -0.8500  0.2400 
 0.6300 -0.1300 -0.1800 -0.4900  0.4500 -0.6000 
-0.9200 -0.2500  0.4700 -0.5000 -0.6300 -0.3600 
 0.8100 -0.4700 -0.5600 -0.2000  0.6000 -0.1100 
 0.2800  0.1500  0.7700 -0.2300 -0.0400  0.6400 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Features: []

51 43 32 41 
81  8 70 36 
51 16 34 19 
67 62 31 77 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Features: []

81  8 70 36 
81  8 70 36 
51 16 34 19 
67 62 31 77 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Features: []

99 0 0 0 0 0 0 0 
0 99 0 0 0 0 0 0 
0 0 99 0 0 0 0 0 
0 0 0 99 0 0 0 0 
0 0 0 0 99 0 0 0 
0 0 0 0 0 99 0 0 
0 0 0 0 0 0 99 0 
0 0 0 0 0 0 0 99 


e+=50:

Square matrix
Dimension: 8x8
Features: []

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Features: []

  1   0   0   0   0   0   0   0 
  0   1   0   0   0   0   0   0 
  0   0   1   0   0   0   0   0 
  0   0   0   1   0   0   0   0 
  0   0   0   0   1   0   0   0 
  0   0   0   0   0   1   0   0 
  0   0   0   0   0   0   1   0 
  0   0   0   0   0   0   0   1 

################

c%j

Dimension: 2x4
Features: []

1 3 5 1 
1 6 0 1 

################

f.roundForm(3)>f.roundForm(1)
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Features: []

 34 -52  33 
  9  88  -3 

################
validStr2:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: []

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: []

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 21.077059193407987, 'Weight': 22.286650829472002, 'Age': 12.98858973112413}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {'90': 3}, 'Age': {'10, 27': 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.variance()
{'Height': 444.24242424242414, 'Weight': 496.6948051948051, 'Age': 168.70346320346317}

"""
# =============================================================================

