# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.echelon.p")
f.echelon.p
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange:\n",g.inRange)
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg:",h.avg)
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [4, 4]}
Averages: {'Col 1': 4.0}

4 


Dimension: 2x4
Numbers' range: {'Col 1': [-3, -1], 'Col 2': [-5, 3], 'Col 3': [-3, 4], 'Col 4': [-5, -3]}
Averages: {'Col 1': -2.0, 'Col 2': -1.0, 'Col 3': 0.5, 'Col 4': -4.0}

-1  3  4 -3 
-3 -5 -3 -5 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-1.7219, 3.2686], 'Col 2': [-0.039, 1.5245], 'Col 3': [-1.7795, 3.2439]}
Averages: {'Col 1': 0.7119, 'Col 2': 0.5955, 'Col 3': 1.0179}

-1.7219 -0.0390 -0.3068 
 1.8361  0.7420  3.2439 
-0.5354  1.5245 -1.7795 
 3.2686  0.1546  2.9141 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-651.9113, 630.5425], 'Col 2': [-866.5327, 459.8334], 'Col 3': [-257.1781, 567.0123], 'Col 4': [-287.0964, 312.547], 'Col 5': [-492.1251, 662.3974], 'Col 6': [-253.4401, 107.6308]}
Averages: {'Col 1': -22.973, 'Col 2': -117.941, 'Col 3': 81.6896, 'Col 4': 13.3117, 'Col 5': -4.8847, 'Col 6': -63.4573}

 160.7964  135.8592  485.9961   71.2616  -82.6381  -10.9153 
-223.1471  459.8334  -20.7598  312.5470  662.3974 -184.6455 
-254.8708  -85.7457  -34.9662 -287.0964 -394.8554   12.1189 
 630.5425 -332.1526 -257.1781 -115.1584 -492.1251  107.6308 
 200.7523  -18.9076  567.0123  190.3062  -20.1639  -51.4925 
-651.9113 -866.5327 -249.9668  -91.9899  298.0767 -253.4401 


Dimension: 3x6
Numbers' range: {'Col 1': [-5, -1], 'Col 2': [-4, 1], 'Col 3': [-4, 5], 'Col 4': [-5, 4], 'Col 5': [-3, 4], 'Col 6': [-1, 3]}
Averages: {'Col 1': -3.6667, 'Col 2': -2.0, 'Col 3': -0.3333, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 1.3333}

-1 -4 -4  1 -3  3 
-5  1  5  4  4 -1 
-5 -3 -2 -5 -1  2 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [45, 95], 'Col 2': [18, 61], 'Col 3': [13, 84], 'Col 4': [7, 96], 'Col 5': [40, 66]}
Averages: {'Col 1': 62.4, 'Col 2': 38.0, 'Col 3': 45.2, 'Col 4': 53.8, 'Col 5': 50.6}

60 40 84 81 50 
52 18 38 67 40 
95 32 13  7 66 
45 61 53 96 48 
60 39 38 18 49 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [-2.4965, 3.7694], 'Col 2': [-3.1217, -1.0192], 'Col 3': [-1.6255, 0.4333], 'Col 4': [-0.9931, 2.4608]}
Averages: {'Col 1': 0.5182, 'Col 2': -1.9889, 'Col 3': -0.2517, 'Col 4': 0.1425}

-0.0198 -1.3599  0.3714 -0.8978 
 0.8196 -1.0192 -1.6255 -0.9931 
 3.7694 -2.4550 -0.1862  2.4608 
-2.4965 -3.1217  0.4333  0.0000 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-1.7219, 3.2686], 'Col 2': [-0.039, 1.5245], 'Col 3': [-1.7795, 3.2439]}
Averages: {'Col 1': 0.7119, 'Col 2': 0.5955, 'Col 3': 1.0179}

-1.7219 -0.0390 -0.3068 
 1.8361  0.7420  3.2439 
-0.5354  1.5245 -1.7795 
 3.2686  0.1546  2.9141 

d.matrix:

[[-1.7219, -0.039, -0.3068], [1.8361, 0.742, 3.2439], [-0.5354, 1.5245, -1.7795], [3.2686, 0.1546, 2.9141]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [-332.1526, 459.8334], 'Col 2': [-257.1781, 485.9961]}
Averages: {'Col 1': 44.4486, 'Col 2': 43.273}

 135.8592  485.9961 
 459.8334  -20.7598 
 -85.7457  -34.9662 
-332.1526 -257.1781 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-651.9113, 630.5425], 'Col 2': [-866.5327, 459.8334], 'Col 3': [-257.1781, 567.0123], 'Col 4': [-287.0964, 312.547], 'Col 5': [-492.1251, 662.3974], 'Col 6': [-253.4401, 107.6308]}
Averages: {'Col 1': -22.973, 'Col 2': -117.941, 'Col 3': 81.6896, 'Col 4': 13.3117, 'Col 5': -4.8847, 'Col 6': -63.4573}

 160.7964  135.8592  485.9961   71.2616  -82.6381  -10.9153 
-223.1471  459.8334  -20.7598  312.5470  662.3974 -184.6455 
-254.8708  -85.7457  -34.9662 -287.0964 -394.8554   12.1189 
 630.5425 -332.1526 -257.1781 -115.1584 -492.1251  107.6308 
 200.7523  -18.9076  567.0123  190.3062  -20.1639  -51.4925 
-651.9113 -866.5327 -249.9668  -91.9899  298.0767 -253.4401 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-651.9113, 630.5425], 'Col 2': [-866.5327, 459.8334], 'Col 3': [-257.1781, 567.0123], 'Col 4': [-287.0964, 312.547], 'Col 5': [-492.1251, 662.3974], 'Col 6': [-253.4401, 107.6308]}
Averages: {'Col 1': -22.973, 'Col 2': -117.941, 'Col 3': 81.6896, 'Col 4': 13.3117, 'Col 5': -4.8847, 'Col 6': -63.4573}

 160.7964  135.8592  485.9961   71.2616  -82.6381  -10.9153 
-223.1471  459.8334  -20.7598  312.5470  662.3974 -184.6455 
-254.8708  -85.7457  -34.9662 -287.0964 -394.8554   12.1189 
 630.5425 -332.1526 -257.1781 -115.1584 -492.1251  107.6308 
 200.7523  -18.9076  567.0123  190.3062  -20.1639  -51.4925 
-651.9113 -866.5327 -249.9668  -91.9899  298.0767 -253.4401 

f.echelon.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0, 160.7964], 'Col 2': [0, 648.3736], 'Col 3': [0, 653.687], 'Col 4': [-393.0945, 411.4411], 'Col 5': [-793.7548, 547.7154], 'Col 6': [-510.7247, 34.7527]}
Averages: {'Col 1': 26.7994, 'Col 2': 130.7055, 'Col 3': 290.731, 'Col 4': -27.7957, 'Col 5': -189.781, 'Col 6': -143.9183}

 160.7964  135.8592  485.9961   71.2616  -82.6381  -10.9153 
   0.0000  648.3736  653.6870  411.4411  547.7154 -199.7933 
   0.0000    0.0000  604.7029 -256.3827 -635.3197   34.7527 
   0.0000    0.0000    0.0000 -393.0945 -793.7548  -41.8912 
   0.0000    0.0000    0.0000    0.0000 -174.6890 -134.9379 
   0.0000    0.0000    0.0000    0.0000    0.0000 -510.7247 

################
g.dim:
 [3, 6]
g.inRange:
 {'Col 1': [-5, -1], 'Col 2': [-4, 1], 'Col 3': [-4, 5], 'Col 4': [-5, 4], 'Col 5': [-3, 4], 'Col 6': [-1, 3]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [-5, -1], 'Col 2': [-4, 1], 'Col 3': [-4, 5], 'Col 4': [-5, 4], 'Col 5': [-3, 4], 'Col 6': [-1, 3]}
Averages: {'Col 1': -3.6667, 'Col 2': -2.0, 'Col 3': -0.3333, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 1.3333}

-1 -4 -4  1 -3  3 
-5  1  5  4  4 -1 
-5 -3 -2 -5 -1  2 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [-5, -1], 'Col 2': [-4, 1], 'Col 3': [-4, 5], 'Col 4': [1, 4], 'Col 5': [-3, 4], 'Col 6': [-1, 3]}
Averages: {'Col 1': -3.0, 'Col 2': -1.5, 'Col 3': 0.5, 'Col 4': 2.5, 'Col 5': 0.5, 'Col 6': 1.0}

-1 -4 -4  1 -3  3 
-5  1  5  4  4 -1 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg: <bound method Matrix.avg of [[96, 35, 31, 47, 55, 58, 88], [35, 71, 89, 7, 5, 44, 44], [5, 94, 47, 69, 28, 73, 92], [97, 35, 99, 16, 7, 97, 57], [57, 62, 20, 72, 3, 46, 33], [38, 25, 39, 11, 24, 94, 72], [72, 30, 23, 88, 34, 62, 99]]>

h.det: 1287482081136.7107

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [35, 97], 'Col 2': [25, 71], 'Col 3': [20, 99], 'Col 4': [3, 55], 'Col 5': [44, 97], 'Col 6': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [-5, -1], 'Col 2': [-4, 1], 'Col 3': [-4, 5], 'Col 4': [1, 4]}
Averages: {'Col 1': -3.0, 'Col 2': -1.5, 'Col 3': 0.5, 'Col 4': 2.5}

-1 -4 -4  1 
-5  1  5  4 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-1, -4, -4, 1], [-5, 1, 5, 4]],inRange={'Col 1': [-5, -1], 'Col 2': [-4, 1], 'Col 3': [-4, 5], 'Col 4': [1, 4]},randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [45, 95], 'Col 2': [18, 61], 'Col 3': [13, 84], 'Col 4': [7, 96], 'Col 5': [40, 66]}
Averages: {'Col 1': 62.4, 'Col 2': 38.0, 'Col 3': 45.2, 'Col 4': 53.8, 'Col 5': 50.6}

60 40 84 81 50 
52 18 38 67 40 
95 32 13  7 66 
45 61 53 96 48 
60 39 38 18 49 

p.det:
 26075805.49889827

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-6098721.8061, 3661005.4302], 'Col 2': [-4344406.1734, 7593715.5698], 'Col 3': [-5980052.3753, 3884212.6176], 'Col 4': [-1632339.2033, 989098.5853], 'Col 5': [-6232601.972, 10210190.4925]}
Averages: {'Col 1': -66991.1823, 'Col 2': 83936.427, 'Col 3': -86127.0893, 'Col 4': 20672.6566, 'Col 5': 202034.3924}

 3661005.4302 -4344406.1734  3884212.6176   828465.2280 -6232601.9720 
 1476154.0110 -2701092.9652  1663241.8126   989098.5853 -2510464.7643 
  516428.2931  -188526.0768  -246642.7765  -341197.0330   293363.3039 
  110178.1601    59991.7808   248605.2749   259335.7058  -750315.0982 
-6098721.8061  7593715.5698 -5980052.3753 -1632339.2033 10210190.4925 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.2339, 0.1404], 'Col 2': [-0.1666, 0.2912], 'Col 3': [-0.2293, 0.149], 'Col 4': [-0.0626, 0.0379], 'Col 5': [-0.239, 0.3916]}
Averages: {'Col 1': -0.0026, 'Col 2': 0.0032, 'Col 3': -0.0033, 'Col 4': 0.0008, 'Col 5': 0.0077}

 0.1404 -0.1666  0.1490  0.0318 -0.2390 
 0.0566 -0.1036  0.0638  0.0379 -0.0963 
 0.0198 -0.0072 -0.0095 -0.0131  0.0113 
 0.0042  0.0023  0.0095  0.0099 -0.0288 
-0.2339  0.2912 -0.2293 -0.0626  0.3916 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [45, 95], 'Col 2': [18, 61], 'Col 3': [13, 84], 'Col 4': [7, 96], 'Col 5': [40, 66]}
Averages: {'Col 1': 62.4, 'Col 2': 38.0, 'Col 3': 45.2, 'Col 4': 53.8, 'Col 5': 50.6}

60 40 84 81 50 
52 18 38 67 40 
95 32 13  7 66 
45 61 53 96 48 
60 39 38 18 49 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [32, 61], 'Col 2': [13, 84], 'Col 3': [7, 96], 'Col 4': [48, 66]}
Averages: {'Col 1': 43.0, 'Col 2': 47.0, 'Col 3': 50.5, 'Col 4': 53.25}

40 84 81 50 
32 13  7 66 
61 53 96 48 
39 38 18 49 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [32, 61], 'Col 2': [55, 55], 'Col 3': [13, 84], 'Col 4': [7, 96], 'Col 5': [48, 66]}
Averages: {'Col 1': 43.0, 'Col 2': 55.0, 'Col 3': 47.0, 'Col 4': 50.5, 'Col 5': 53.25}

40 55 84 81 50 
32 55 13  7 66 
61 55 53 96 48 
39 55 38 18 49 

################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [40, 84], 'Col 2': [7, 66], 'Col 3': [48, 96], 'Col 4': [18, 55]}
Averages: {'Col 1': 62.0, 'Col 2': 34.6, 'Col 3': 62.6, 'Col 4': 39.8}

40 32 61 39 
55 55 55 55 
84 13 53 38 
81  7 96 18 
50 66 48 49 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

 1  0  0  0  0  0  0 
 0  1  0  0  0  0  0 
 0  0  1  0  0  0  0 
 0  0  0  1  0  0  0 
 0  0  0  0  1  0  0 
 0  0  0  0  0  1  0 
 0  0  0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

 1  0  0  0  0  0  0  0  0  0 
 0  1  0  0  0  0  0  0  0  0 
 0  0  1  0  0  0  0  0  0  0 
 0  0  0  1  0  0  0  0  0  0 
 0  0  0  0  1  0  0  0  0  0 
 0  0  0  0  0  1  0  0  0  0 
 0  0  0  0  0  0  1  0  0  0 
 0  0  0  0  0  0  0  1  0  0 
 0  0  0  0  0  0  0  0  1  0 
 0  0  0  0  0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-18.7516, -4.7172], 'Col 2': [-8.9395, 7.8992], 'Col 3': [-24.5311, -5.8218]}
Averages: {'Col 1': -11.7344, 'Col 2': -0.5202, 'Col 3': -15.1764}

 -4.7172   7.8992  -5.8218 
-18.7516  -8.9395 -24.5311 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [0.7039, 1.7739], 'Col 2': [1.538, 1.8995], 'Col 3': [0.8129, 1.0633]}
Averages: {'Col 1': 1.2389, 'Col 2': 1.7187, 'Col 3': 0.9381}

1.7739 1.8995 0.8129 
0.7039 1.5380 1.0633 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-651.9113, 630.5425], 'Col 2': [-866.5327, 459.8334], 'Col 3': [-257.1781, 567.0123], 'Col 4': [-287.0964, 312.547], 'Col 5': [-492.1251, 662.3974], 'Col 6': [-253.4401, 107.6308]}
Averages: {'Col 1': -22.973, 'Col 2': -117.941, 'Col 3': 81.6896, 'Col 4': 13.3117, 'Col 5': -4.8847, 'Col 6': -63.4573}

 160.7964  135.8592  485.9961   71.2616  -82.6381  -10.9153 
-223.1471  459.8334  -20.7598  312.5470  662.3974 -184.6455 
-254.8708  -85.7457  -34.9662 -287.0964 -394.8554   12.1189 
 630.5425 -332.1526 -257.1781 -115.1584 -492.1251  107.6308 
 200.7523  -18.9076  567.0123  190.3062  -20.1639  -51.4925 
-651.9113 -866.5327 -249.9668  -91.9899  298.0767 -253.4401 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-651, 630], 'Col 2': [-866, 459], 'Col 3': [-257, 567], 'Col 4': [-287, 312], 'Col 5': [-492, 662], 'Col 6': [-253, 107]}
Averages: {'Col 1': -23.0, 'Col 2': -117.8333, 'Col 3': 82.0, 'Col 4': 13.3333, 'Col 5': -4.6667, 'Col 6': -63.1667}

 160  135  485   71  -82  -10 
-223  459  -20  312  662 -184 
-254  -85  -34 -287 -394   12 
 630 -332 -257 -115 -492  107 
 200  -18  567  190  -20  -51 
-651 -866 -249  -91  298 -253 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-651.91, 630.54], 'Col 2': [-866.53, 459.83], 'Col 3': [-257.18, 567.01], 'Col 4': [-287.1, 312.55], 'Col 5': [-492.13, 662.4], 'Col 6': [-253.44, 107.63]}
Averages: {'Col 1': -22.9733, 'Col 2': -117.9417, 'Col 3': 81.6883, 'Col 4': 13.3117, 'Col 5': -4.885, 'Col 6': -63.4583}

 160.8000  135.8600  486.0000   71.2600  -82.6400  -10.9200 
-223.1500  459.8300  -20.7600  312.5500  662.4000 -184.6500 
-254.8700  -85.7500  -34.9700 -287.1000 -394.8600   12.1200 
 630.5400 -332.1500 -257.1800 -115.1600 -492.1300  107.6300 
 200.7500  -18.9100  567.0100  190.3100  -20.1600  -51.4900 
-651.9100 -866.5300 -249.9700  -91.9900  298.0800 -253.4400 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.91, 0.8], 'Col 2': [-0.91, 0.86], 'Col 3': [-0.97, 1.0], 'Col 4': [-0.99, 0.55], 'Col 5': [-0.86, 0.4], 'Col 6': [-0.92, 0.63]}
Averages: {'Col 1': 0.0267, 'Col 2': -0.1083, 'Col 3': -0.3117, 'Col 4': -0.0217, 'Col 5': -0.2183, 'Col 6': -0.2917}

 0.8000  0.8600  1.0000  0.2600 -0.6400 -0.9200 
-0.1500  0.8300 -0.7600  0.5500  0.4000 -0.6500 
-0.8700 -0.7500 -0.9700 -0.1000 -0.8600  0.1200 
 0.5400 -0.1500 -0.1800 -0.1600 -0.1300  0.6300 
 0.7500 -0.9100  0.0100  0.3100 -0.1600 -0.4900 
-0.9100 -0.5300 -0.9700 -0.9900  0.0800 -0.4400 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [40, 84], 'Col 2': [7, 66], 'Col 3': [48, 96], 'Col 4': [18, 49]}
Averages: {'Col 1': 63.75, 'Col 2': 29.5, 'Col 3': 64.5, 'Col 4': 36.0}

40 32 61 39 
84 13 53 38 
81  7 96 18 
50 66 48 49 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [50, 84], 'Col 2': [7, 66], 'Col 3': [48, 96], 'Col 4': [18, 49]}
Averages: {'Col 1': 74.75, 'Col 2': 24.75, 'Col 3': 62.5, 'Col 4': 35.75}

84 13 53 38 
84 13 53 38 
81  7 96 18 
50 66 48 49 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 99], 'Col 2': [0, 99], 'Col 3': [0, 99], 'Col 4': [0, 99], 'Col 5': [0, 99], 'Col 6': [0, 99], 'Col 7': [0, 99], 'Col 8': [0, 99]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: {'Col 1': [-3, 0], 'Col 2': [-1, 0], 'Col 3': [0, 2], 'Col 4': [0, 3]}
Averages: {'Col 1': -1.5, 'Col 2': -0.5, 'Col 3': 1.0, 'Col 4': 1.5}

 0 -1  0  0 
-3  0  2  3 

################

f.roundForm(3)>f.roundForm(1)
False

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

